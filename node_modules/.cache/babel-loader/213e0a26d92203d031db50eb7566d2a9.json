{"ast":null,"code":"/**\r\n * mux.js\r\n *\r\n * Copyright (c) Brightcove\r\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n *\r\n * Utilities to detect basic properties and metadata about TS Segments.\r\n */\n'use strict';\n\nvar StreamTypes = require('./stream-types.js');\n\nvar parsePid = function (packet) {\n  var pid = packet[1] & 0x1f;\n  pid <<= 8;\n  pid |= packet[2];\n  return pid;\n};\n\nvar parsePayloadUnitStartIndicator = function (packet) {\n  return !!(packet[1] & 0x40);\n};\n\nvar parseAdaptionField = function (packet) {\n  var offset = 0; // if an adaption field is present, its length is specified by the\n  // fifth byte of the TS packet header. The adaptation field is\n  // used to add stuffing to PES packets that don't fill a complete\n  // TS packet, and to specify some forms of timing and control data\n  // that we do not currently use.\n\n  if ((packet[3] & 0x30) >>> 4 > 0x01) {\n    offset += packet[4] + 1;\n  }\n\n  return offset;\n};\n\nvar parseType = function (packet, pmtPid) {\n  var pid = parsePid(packet);\n\n  if (pid === 0) {\n    return 'pat';\n  } else if (pid === pmtPid) {\n    return 'pmt';\n  } else if (pmtPid) {\n    return 'pes';\n  }\n\n  return null;\n};\n\nvar parsePat = function (packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    offset += packet[offset] + 1;\n  }\n\n  return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\n};\n\nvar parsePmt = function (packet) {\n  var programMapTable = {};\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var payloadOffset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    payloadOffset += packet[payloadOffset] + 1;\n  } // PMTs can be sent ahead of the time when they should actually\n  // take effect. We don't believe this should ever be the case\n  // for HLS but we'll ignore \"forward\" PMT declarations if we see\n  // them. Future PMT declarations have the current_next_indicator\n  // set to zero.\n\n\n  if (!(packet[payloadOffset + 5] & 0x01)) {\n    return;\n  }\n\n  var sectionLength, tableEnd, programInfoLength; // the mapping table ends at the end of the current section\n\n  sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\n  tableEnd = 3 + sectionLength - 4; // to determine where the table is, we have to figure out how\n  // long the program info descriptors are\n\n  programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11]; // advance the offset to the first entry in the mapping table\n\n  var offset = 12 + programInfoLength;\n\n  while (offset < tableEnd) {\n    var i = payloadOffset + offset; // add an entry that maps the elementary_pid to the stream_type\n\n    programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i]; // move to the next table entry\n    // skip past the elementary stream descriptors, if present\n\n    offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\n  }\n\n  return programMapTable;\n};\n\nvar parsePesType = function (packet, programMapTable) {\n  var pid = parsePid(packet);\n  var type = programMapTable[pid];\n\n  switch (type) {\n    case StreamTypes.H264_STREAM_TYPE:\n      return 'video';\n\n    case StreamTypes.ADTS_STREAM_TYPE:\n      return 'audio';\n\n    case StreamTypes.METADATA_STREAM_TYPE:\n      return 'timed-metadata';\n\n    default:\n      return null;\n  }\n};\n\nvar parsePesTime = function (packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n\n  if (!pusi) {\n    return null;\n  }\n\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (offset >= packet.byteLength) {\n    // From the H 222.0 MPEG-TS spec\n    // \"For transport stream packets carrying PES packets, stuffing is needed when there\n    //  is insufficient PES packet data to completely fill the transport stream packet\n    //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\n    //  the sum of the lengths of the data elements in it, so that the payload bytes\n    //  remaining after the adaptation field exactly accommodates the available PES packet\n    //  data.\"\n    //\n    // If the offset is >= the length of the packet, then the packet contains no data\n    // and instead is just adaption field stuffing bytes\n    return null;\n  }\n\n  var pes = null;\n  var ptsDtsFlags; // PES packets may be annotated with a PTS value, or a PTS value\n  // and a DTS value. Determine what combination of values is\n  // available to work with.\n\n  ptsDtsFlags = packet[offset + 7]; // PTS and DTS are normally stored as a 33-bit number.  Javascript\n  // performs all bitwise operations on 32-bit integers but javascript\n  // supports a much greater range (52-bits) of integer using standard\n  // mathematical operations.\n  // We construct a 31-bit value using bitwise operators over the 31\n  // most significant bits and then multiply by 4 (equal to a left-shift\n  // of 2) before we add the final 2 least significant bits of the\n  // timestamp (equal to an OR.)\n\n  if (ptsDtsFlags & 0xC0) {\n    pes = {}; // the PTS and DTS are not written out directly. For information\n    // on how they are encoded, see\n    // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n\n    pes.pts = (packet[offset + 9] & 0x0E) << 27 | (packet[offset + 10] & 0xFF) << 20 | (packet[offset + 11] & 0xFE) << 12 | (packet[offset + 12] & 0xFF) << 5 | (packet[offset + 13] & 0xFE) >>> 3;\n    pes.pts *= 4; // Left shift by 2\n\n    pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\n\n    pes.dts = pes.pts;\n\n    if (ptsDtsFlags & 0x40) {\n      pes.dts = (packet[offset + 14] & 0x0E) << 27 | (packet[offset + 15] & 0xFF) << 20 | (packet[offset + 16] & 0xFE) << 12 | (packet[offset + 17] & 0xFF) << 5 | (packet[offset + 18] & 0xFE) >>> 3;\n      pes.dts *= 4; // Left shift by 2\n\n      pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\n    }\n  }\n\n  return pes;\n};\n\nvar parseNalUnitType = function (type) {\n  switch (type) {\n    case 0x05:\n      return 'slice_layer_without_partitioning_rbsp_idr';\n\n    case 0x06:\n      return 'sei_rbsp';\n\n    case 0x07:\n      return 'seq_parameter_set_rbsp';\n\n    case 0x08:\n      return 'pic_parameter_set_rbsp';\n\n    case 0x09:\n      return 'access_unit_delimiter_rbsp';\n\n    default:\n      return null;\n  }\n};\n\nvar videoPacketContainsKeyFrame = function (packet) {\n  var offset = 4 + parseAdaptionField(packet);\n  var frameBuffer = packet.subarray(offset);\n  var frameI = 0;\n  var frameSyncPoint = 0;\n  var foundKeyFrame = false;\n  var nalType; // advance the sync point to a NAL start, if necessary\n\n  for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\n    if (frameBuffer[frameSyncPoint + 2] === 1) {\n      // the sync point is properly aligned\n      frameI = frameSyncPoint + 5;\n      break;\n    }\n  }\n\n  while (frameI < frameBuffer.byteLength) {\n    // look at the current byte to determine if we've hit the end of\n    // a NAL unit boundary\n    switch (frameBuffer[frameI]) {\n      case 0:\n        // skip past non-sync sequences\n        if (frameBuffer[frameI - 1] !== 0) {\n          frameI += 2;\n          break;\n        } else if (frameBuffer[frameI - 2] !== 0) {\n          frameI++;\n          break;\n        }\n\n        if (frameSyncPoint + 3 !== frameI - 2) {\n          nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n\n          if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n            foundKeyFrame = true;\n          }\n        } // drop trailing zeroes\n\n\n        do {\n          frameI++;\n        } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\n\n        frameSyncPoint = frameI - 2;\n        frameI += 3;\n        break;\n\n      case 1:\n        // skip past non-sync sequences\n        if (frameBuffer[frameI - 1] !== 0 || frameBuffer[frameI - 2] !== 0) {\n          frameI += 3;\n          break;\n        }\n\n        nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n\n        if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n          foundKeyFrame = true;\n        }\n\n        frameSyncPoint = frameI - 2;\n        frameI += 3;\n        break;\n\n      default:\n        // the current byte isn't a one or zero, so it cannot be part\n        // of a sync sequence\n        frameI += 3;\n        break;\n    }\n  }\n\n  frameBuffer = frameBuffer.subarray(frameSyncPoint);\n  frameI -= frameSyncPoint;\n  frameSyncPoint = 0; // parse the final nal\n\n  if (frameBuffer && frameBuffer.byteLength > 3) {\n    nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n\n    if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n      foundKeyFrame = true;\n    }\n  }\n\n  return foundKeyFrame;\n};\n\nmodule.exports = {\n  parseType: parseType,\n  parsePat: parsePat,\n  parsePmt: parsePmt,\n  parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\n  parsePesType: parsePesType,\n  parsePesTime: parsePesTime,\n  videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\n};","map":{"version":3,"sources":["C:/Users/franc/Documents/GitHub/but-project/node_modules/mux.js/lib/m2ts/probe.js"],"names":["StreamTypes","require","parsePid","packet","pid","parsePayloadUnitStartIndicator","parseAdaptionField","offset","parseType","pmtPid","parsePat","pusi","parsePmt","programMapTable","payloadOffset","sectionLength","tableEnd","programInfoLength","i","parsePesType","type","H264_STREAM_TYPE","ADTS_STREAM_TYPE","METADATA_STREAM_TYPE","parsePesTime","byteLength","pes","ptsDtsFlags","pts","dts","parseNalUnitType","videoPacketContainsKeyFrame","frameBuffer","subarray","frameI","frameSyncPoint","foundKeyFrame","nalType","length","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * mux.js\r\n *\r\n * Copyright (c) Brightcove\r\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n *\r\n * Utilities to detect basic properties and metadata about TS Segments.\r\n */\r\n'use strict';\r\n\r\nvar StreamTypes = require('./stream-types.js');\r\n\r\nvar parsePid = function(packet) {\r\n  var pid = packet[1] & 0x1f;\r\n  pid <<= 8;\r\n  pid |= packet[2];\r\n  return pid;\r\n};\r\n\r\nvar parsePayloadUnitStartIndicator = function(packet) {\r\n  return !!(packet[1] & 0x40);\r\n};\r\n\r\nvar parseAdaptionField = function(packet) {\r\n  var offset = 0;\r\n  // if an adaption field is present, its length is specified by the\r\n  // fifth byte of the TS packet header. The adaptation field is\r\n  // used to add stuffing to PES packets that don't fill a complete\r\n  // TS packet, and to specify some forms of timing and control data\r\n  // that we do not currently use.\r\n  if (((packet[3] & 0x30) >>> 4) > 0x01) {\r\n    offset += packet[4] + 1;\r\n  }\r\n  return offset;\r\n};\r\n\r\nvar parseType = function(packet, pmtPid) {\r\n  var pid = parsePid(packet);\r\n  if (pid === 0) {\r\n    return 'pat';\r\n  } else if (pid === pmtPid) {\r\n    return 'pmt';\r\n  } else if (pmtPid) {\r\n    return 'pes';\r\n  }\r\n  return null;\r\n};\r\n\r\nvar parsePat = function(packet) {\r\n  var pusi = parsePayloadUnitStartIndicator(packet);\r\n  var offset = 4 + parseAdaptionField(packet);\r\n\r\n  if (pusi) {\r\n    offset += packet[offset] + 1;\r\n  }\r\n\r\n  return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\r\n};\r\n\r\nvar parsePmt = function(packet) {\r\n  var programMapTable = {};\r\n  var pusi = parsePayloadUnitStartIndicator(packet);\r\n  var payloadOffset = 4 + parseAdaptionField(packet);\r\n\r\n  if (pusi) {\r\n    payloadOffset += packet[payloadOffset] + 1;\r\n  }\r\n\r\n  // PMTs can be sent ahead of the time when they should actually\r\n  // take effect. We don't believe this should ever be the case\r\n  // for HLS but we'll ignore \"forward\" PMT declarations if we see\r\n  // them. Future PMT declarations have the current_next_indicator\r\n  // set to zero.\r\n  if (!(packet[payloadOffset + 5] & 0x01)) {\r\n    return;\r\n  }\r\n\r\n  var sectionLength, tableEnd, programInfoLength;\r\n  // the mapping table ends at the end of the current section\r\n  sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\r\n  tableEnd = 3 + sectionLength - 4;\r\n\r\n  // to determine where the table is, we have to figure out how\r\n  // long the program info descriptors are\r\n  programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11];\r\n\r\n  // advance the offset to the first entry in the mapping table\r\n  var offset = 12 + programInfoLength;\r\n  while (offset < tableEnd) {\r\n    var i = payloadOffset + offset;\r\n    // add an entry that maps the elementary_pid to the stream_type\r\n    programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i];\r\n\r\n    // move to the next table entry\r\n    // skip past the elementary stream descriptors, if present\r\n    offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\r\n  }\r\n  return programMapTable;\r\n};\r\n\r\nvar parsePesType = function(packet, programMapTable) {\r\n  var pid = parsePid(packet);\r\n  var type = programMapTable[pid];\r\n  switch (type) {\r\n    case StreamTypes.H264_STREAM_TYPE:\r\n      return 'video';\r\n    case StreamTypes.ADTS_STREAM_TYPE:\r\n      return 'audio';\r\n    case StreamTypes.METADATA_STREAM_TYPE:\r\n      return 'timed-metadata';\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nvar parsePesTime = function(packet) {\r\n  var pusi = parsePayloadUnitStartIndicator(packet);\r\n  if (!pusi) {\r\n    return null;\r\n  }\r\n\r\n  var offset = 4 + parseAdaptionField(packet);\r\n\r\n  if (offset >= packet.byteLength) {\r\n    // From the H 222.0 MPEG-TS spec\r\n    // \"For transport stream packets carrying PES packets, stuffing is needed when there\r\n    //  is insufficient PES packet data to completely fill the transport stream packet\r\n    //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\r\n    //  the sum of the lengths of the data elements in it, so that the payload bytes\r\n    //  remaining after the adaptation field exactly accommodates the available PES packet\r\n    //  data.\"\r\n    //\r\n    // If the offset is >= the length of the packet, then the packet contains no data\r\n    // and instead is just adaption field stuffing bytes\r\n    return null;\r\n  }\r\n\r\n  var pes = null;\r\n  var ptsDtsFlags;\r\n\r\n  // PES packets may be annotated with a PTS value, or a PTS value\r\n  // and a DTS value. Determine what combination of values is\r\n  // available to work with.\r\n  ptsDtsFlags = packet[offset + 7];\r\n\r\n  // PTS and DTS are normally stored as a 33-bit number.  Javascript\r\n  // performs all bitwise operations on 32-bit integers but javascript\r\n  // supports a much greater range (52-bits) of integer using standard\r\n  // mathematical operations.\r\n  // We construct a 31-bit value using bitwise operators over the 31\r\n  // most significant bits and then multiply by 4 (equal to a left-shift\r\n  // of 2) before we add the final 2 least significant bits of the\r\n  // timestamp (equal to an OR.)\r\n  if (ptsDtsFlags & 0xC0) {\r\n    pes = {};\r\n    // the PTS and DTS are not written out directly. For information\r\n    // on how they are encoded, see\r\n    // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\r\n    pes.pts = (packet[offset + 9] & 0x0E) << 27 |\r\n      (packet[offset + 10] & 0xFF) << 20 |\r\n      (packet[offset + 11] & 0xFE) << 12 |\r\n      (packet[offset + 12] & 0xFF) <<  5 |\r\n      (packet[offset + 13] & 0xFE) >>>  3;\r\n    pes.pts *= 4; // Left shift by 2\r\n    pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\r\n    pes.dts = pes.pts;\r\n    if (ptsDtsFlags & 0x40) {\r\n      pes.dts = (packet[offset + 14] & 0x0E) << 27 |\r\n        (packet[offset + 15] & 0xFF) << 20 |\r\n        (packet[offset + 16] & 0xFE) << 12 |\r\n        (packet[offset + 17] & 0xFF) << 5 |\r\n        (packet[offset + 18] & 0xFE) >>> 3;\r\n      pes.dts *= 4; // Left shift by 2\r\n      pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\r\n    }\r\n  }\r\n  return pes;\r\n};\r\n\r\nvar parseNalUnitType = function(type) {\r\n  switch (type) {\r\n    case 0x05:\r\n      return 'slice_layer_without_partitioning_rbsp_idr';\r\n    case 0x06:\r\n      return 'sei_rbsp';\r\n    case 0x07:\r\n      return 'seq_parameter_set_rbsp';\r\n    case 0x08:\r\n      return 'pic_parameter_set_rbsp';\r\n    case 0x09:\r\n      return 'access_unit_delimiter_rbsp';\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nvar videoPacketContainsKeyFrame = function(packet) {\r\n  var offset = 4 + parseAdaptionField(packet);\r\n  var frameBuffer = packet.subarray(offset);\r\n  var frameI = 0;\r\n  var frameSyncPoint = 0;\r\n  var foundKeyFrame = false;\r\n  var nalType;\r\n\r\n  // advance the sync point to a NAL start, if necessary\r\n  for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\r\n    if (frameBuffer[frameSyncPoint + 2] === 1) {\r\n      // the sync point is properly aligned\r\n      frameI = frameSyncPoint + 5;\r\n      break;\r\n    }\r\n  }\r\n\r\n  while (frameI < frameBuffer.byteLength) {\r\n    // look at the current byte to determine if we've hit the end of\r\n    // a NAL unit boundary\r\n    switch (frameBuffer[frameI]) {\r\n    case 0:\r\n      // skip past non-sync sequences\r\n      if (frameBuffer[frameI - 1] !== 0) {\r\n        frameI += 2;\r\n        break;\r\n      } else if (frameBuffer[frameI - 2] !== 0) {\r\n        frameI++;\r\n        break;\r\n      }\r\n\r\n      if (frameSyncPoint + 3 !== frameI - 2) {\r\n        nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\r\n        if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\r\n          foundKeyFrame = true;\r\n        }\r\n      }\r\n\r\n      // drop trailing zeroes\r\n      do {\r\n        frameI++;\r\n      } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\r\n      frameSyncPoint = frameI - 2;\r\n      frameI += 3;\r\n      break;\r\n    case 1:\r\n      // skip past non-sync sequences\r\n      if (frameBuffer[frameI - 1] !== 0 ||\r\n          frameBuffer[frameI - 2] !== 0) {\r\n        frameI += 3;\r\n        break;\r\n      }\r\n\r\n      nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\r\n      if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\r\n        foundKeyFrame = true;\r\n      }\r\n      frameSyncPoint = frameI - 2;\r\n      frameI += 3;\r\n      break;\r\n    default:\r\n      // the current byte isn't a one or zero, so it cannot be part\r\n      // of a sync sequence\r\n      frameI += 3;\r\n      break;\r\n    }\r\n  }\r\n  frameBuffer = frameBuffer.subarray(frameSyncPoint);\r\n  frameI -= frameSyncPoint;\r\n  frameSyncPoint = 0;\r\n  // parse the final nal\r\n  if (frameBuffer && frameBuffer.byteLength > 3) {\r\n    nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\r\n    if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\r\n      foundKeyFrame = true;\r\n    }\r\n  }\r\n\r\n  return foundKeyFrame;\r\n};\r\n\r\n\r\nmodule.exports = {\r\n  parseType: parseType,\r\n  parsePat: parsePat,\r\n  parsePmt: parsePmt,\r\n  parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\r\n  parsePesType: parsePesType,\r\n  parsePesTime: parsePesTime,\r\n  videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\r\n};\r\n"]},"metadata":{},"sourceType":"script"}