{"ast":null,"code":"/*! @name @videojs/vhs-utils @version 2.3.0 @license MIT */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar MPEGURL_REGEX = /^(audio|video|application)\\/(x-|vnd\\.apple\\.)?mpegurl/i;\nvar DASH_REGEX = /^application\\/dash\\+xml/i;\n/**\r\n * Returns a string that describes the type of source based on a video source object's\r\n * media type.\r\n *\r\n * @see {@link https://dev.w3.org/html5/pf-summary/video.html#dom-source-type|Source Type}\r\n *\r\n * @param {string} type\r\n *        Video source object media type\r\n * @return {('hls'|'dash'|'vhs-json'|null)}\r\n *         VHS source type string\r\n */\n\nvar simpleTypeFromSourceType = function simpleTypeFromSourceType(type) {\n  if (MPEGURL_REGEX.test(type)) {\n    return 'hls';\n  }\n\n  if (DASH_REGEX.test(type)) {\n    return 'dash';\n  } // Denotes the special case of a manifest object passed to http-streaming instead of a\n  // source URL.\n  //\n  // See https://en.wikipedia.org/wiki/Media_type for details on specifying media types.\n  //\n  // In this case, vnd stands for vendor, video.js for the organization, VHS for this\n  // project, and the +json suffix identifies the structure of the media type.\n\n\n  if (type === 'application/vnd.videojs.vhs+json') {\n    return 'vhs-json';\n  }\n\n  return null;\n};\n\nexports.simpleTypeFromSourceType = simpleTypeFromSourceType;","map":{"version":3,"sources":["C:/Users/franc/Documents/GitHub/but-project/node_modules/@videojs/vhs-utils/dist/media-types.js"],"names":["Object","defineProperty","exports","value","MPEGURL_REGEX","DASH_REGEX","simpleTypeFromSourceType","type","test"],"mappings":"AAAA;AACA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AAEA,IAAIC,aAAa,GAAG,wDAApB;AACA,IAAIC,UAAU,GAAG,0BAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,wBAAwB,GAAG,SAASA,wBAAT,CAAkCC,IAAlC,EAAwC;AACrE,MAAIH,aAAa,CAACI,IAAd,CAAmBD,IAAnB,CAAJ,EAA8B;AAC5B,WAAO,KAAP;AACD;;AAED,MAAIF,UAAU,CAACG,IAAX,CAAgBD,IAAhB,CAAJ,EAA2B;AACzB,WAAO,MAAP;AACD,GAPoE,CAOnE;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAIA,IAAI,KAAK,kCAAb,EAAiD;AAC/C,WAAO,UAAP;AACD;;AAED,SAAO,IAAP;AACD,CArBD;;AAuBAL,OAAO,CAACI,wBAAR,GAAmCA,wBAAnC","sourcesContent":["/*! @name @videojs/vhs-utils @version 2.3.0 @license MIT */\r\n'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\nvar MPEGURL_REGEX = /^(audio|video|application)\\/(x-|vnd\\.apple\\.)?mpegurl/i;\r\nvar DASH_REGEX = /^application\\/dash\\+xml/i;\r\n/**\r\n * Returns a string that describes the type of source based on a video source object's\r\n * media type.\r\n *\r\n * @see {@link https://dev.w3.org/html5/pf-summary/video.html#dom-source-type|Source Type}\r\n *\r\n * @param {string} type\r\n *        Video source object media type\r\n * @return {('hls'|'dash'|'vhs-json'|null)}\r\n *         VHS source type string\r\n */\r\n\r\nvar simpleTypeFromSourceType = function simpleTypeFromSourceType(type) {\r\n  if (MPEGURL_REGEX.test(type)) {\r\n    return 'hls';\r\n  }\r\n\r\n  if (DASH_REGEX.test(type)) {\r\n    return 'dash';\r\n  } // Denotes the special case of a manifest object passed to http-streaming instead of a\r\n  // source URL.\r\n  //\r\n  // See https://en.wikipedia.org/wiki/Media_type for details on specifying media types.\r\n  //\r\n  // In this case, vnd stands for vendor, video.js for the organization, VHS for this\r\n  // project, and the +json suffix identifies the structure of the media type.\r\n\r\n\r\n  if (type === 'application/vnd.videojs.vhs+json') {\r\n    return 'vhs-json';\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexports.simpleTypeFromSourceType = simpleTypeFromSourceType;\r\n"]},"metadata":{},"sourceType":"script"}