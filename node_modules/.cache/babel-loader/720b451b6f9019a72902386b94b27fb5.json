{"ast":null,"code":"/*! @name mpd-parser @version 0.14.0 @license Apache-2.0 */\nimport resolveUrl from '@videojs/vhs-utils/dist/resolve-url';\nimport window from 'global/window';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/dist/decode-b64-to-uint8-array';\nimport { DOMParser } from 'xmldom';\nvar version = \"0.14.0\";\n\nvar isObject = function isObject(obj) {\n  return !!obj && typeof obj === 'object';\n};\n\nvar merge = function merge() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  return objects.reduce(function (result, source) {\n    Object.keys(source).forEach(function (key) {\n      if (Array.isArray(result[key]) && Array.isArray(source[key])) {\n        result[key] = result[key].concat(source[key]);\n      } else if (isObject(result[key]) && isObject(source[key])) {\n        result[key] = merge(result[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n    return result;\n  }, {});\n};\n\nvar values = function values(o) {\n  return Object.keys(o).map(function (k) {\n    return o[k];\n  });\n};\n\nvar range = function range(start, end) {\n  var result = [];\n\n  for (var i = start; i < end; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\n\nvar flatten = function flatten(lists) {\n  return lists.reduce(function (x, y) {\n    return x.concat(y);\n  }, []);\n};\n\nvar from = function from(list) {\n  if (!list.length) {\n    return [];\n  }\n\n  var result = [];\n\n  for (var i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n\n  return result;\n};\n\nvar findIndexes = function findIndexes(l, key) {\n  return l.reduce(function (a, e, i) {\n    if (e[key]) {\n      a.push(i);\n    }\n\n    return a;\n  }, []);\n};\n\nvar errors = {\n  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\n  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\n  DASH_INVALID_XML: 'DASH_INVALID_XML',\n  NO_BASE_URL: 'NO_BASE_URL',\n  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\n  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\n  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\n};\n/**\r\n * @typedef {Object} SingleUri\r\n * @property {string} uri - relative location of segment\r\n * @property {string} resolvedUri - resolved location of segment\r\n * @property {Object} byterange - Object containing information on how to make byte range\r\n *   requests following byte-range-spec per RFC2616.\r\n * @property {String} byterange.length - length of range request\r\n * @property {String} byterange.offset - byte offset of range request\r\n *\r\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\r\n */\n\n/**\r\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\r\n * that conforms to how m3u8-parser is structured\r\n *\r\n * @see https://github.com/videojs/m3u8-parser\r\n *\r\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\r\n * @param {string} source - source url for segment\r\n * @param {string} range - optional range used for range calls,\r\n *   follows  RFC 2616, Clause 14.35.1\r\n * @return {SingleUri} full segment information transformed into a format similar\r\n *   to m3u8-parser\r\n */\n\nvar urlTypeToSegment = function urlTypeToSegment(_ref) {\n  var _ref$baseUrl = _ref.baseUrl,\n      baseUrl = _ref$baseUrl === void 0 ? '' : _ref$baseUrl,\n      _ref$source = _ref.source,\n      source = _ref$source === void 0 ? '' : _ref$source,\n      _ref$range = _ref.range,\n      range = _ref$range === void 0 ? '' : _ref$range,\n      _ref$indexRange = _ref.indexRange,\n      indexRange = _ref$indexRange === void 0 ? '' : _ref$indexRange;\n  var segment = {\n    uri: source,\n    resolvedUri: resolveUrl(baseUrl || '', source)\n  };\n\n  if (range || indexRange) {\n    var rangeStr = range ? range : indexRange;\n    var ranges = rangeStr.split('-');\n    var startRange = parseInt(ranges[0], 10);\n    var endRange = parseInt(ranges[1], 10); // byterange should be inclusive according to\n    // RFC 2616, Clause 14.35.1\n\n    segment.byterange = {\n      length: endRange - startRange + 1,\n      offset: startRange\n    };\n  }\n\n  return segment;\n};\n\nvar byteRangeToString = function byteRangeToString(byterange) {\n  // `endRange` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  var endRange = byterange.offset + byterange.length - 1;\n  return byterange.offset + \"-\" + endRange;\n};\n/**\r\n * Functions for calculating the range of available segments in static and dynamic\r\n * manifests.\r\n */\n\n\nvar segmentRange = {\n  /**\r\n   * Returns the entire range of available segments for a static MPD\r\n   *\r\n   * @param {Object} attributes\r\n   *        Inheritied MPD attributes\r\n   * @return {{ start: number, end: number }}\r\n   *         The start and end numbers for available segments\r\n   */\n  static: function _static(attributes) {\n    var duration = attributes.duration,\n        _attributes$timescale = attributes.timescale,\n        timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n        sourceDuration = attributes.sourceDuration;\n    return {\n      start: 0,\n      end: Math.ceil(sourceDuration / (duration / timescale))\n    };\n  },\n\n  /**\r\n   * Returns the current live window range of available segments for a dynamic MPD\r\n   *\r\n   * @param {Object} attributes\r\n   *        Inheritied MPD attributes\r\n   * @return {{ start: number, end: number }}\r\n   *         The start and end numbers for available segments\r\n   */\n  dynamic: function dynamic(attributes) {\n    var NOW = attributes.NOW,\n        clientOffset = attributes.clientOffset,\n        availabilityStartTime = attributes.availabilityStartTime,\n        _attributes$timescale2 = attributes.timescale,\n        timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n        duration = attributes.duration,\n        _attributes$start = attributes.start,\n        start = _attributes$start === void 0 ? 0 : _attributes$start,\n        _attributes$minimumUp = attributes.minimumUpdatePeriod,\n        minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp,\n        _attributes$timeShift = attributes.timeShiftBufferDepth,\n        timeShiftBufferDepth = _attributes$timeShift === void 0 ? Infinity : _attributes$timeShift;\n    var now = (NOW + clientOffset) / 1000;\n    var periodStartWC = availabilityStartTime + start;\n    var periodEndWC = now + minimumUpdatePeriod;\n    var periodDuration = periodEndWC - periodStartWC;\n    var segmentCount = Math.ceil(periodDuration * timescale / duration);\n    var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\n    var availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\n    return {\n      start: Math.max(0, availableStart),\n      end: Math.min(segmentCount, availableEnd)\n    };\n  }\n};\n/**\r\n * Maps a range of numbers to objects with information needed to build the corresponding\r\n * segment list\r\n *\r\n * @name toSegmentsCallback\r\n * @function\r\n * @param {number} number\r\n *        Number of the segment\r\n * @param {number} index\r\n *        Index of the number in the range list\r\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\r\n *         Object with segment timing and duration info\r\n */\n\n/**\r\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\r\n * information needed to build the segment list.\r\n *\r\n * @param {Object} attributes\r\n *        Inherited MPD attributes\r\n * @return {toSegmentsCallback}\r\n *         Callback map function\r\n */\n\nvar toSegments = function toSegments(attributes) {\n  return function (number, index) {\n    var duration = attributes.duration,\n        _attributes$timescale3 = attributes.timescale,\n        timescale = _attributes$timescale3 === void 0 ? 1 : _attributes$timescale3,\n        periodIndex = attributes.periodIndex,\n        _attributes$startNumb = attributes.startNumber,\n        startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb;\n    return {\n      number: startNumber + number,\n      duration: duration / timescale,\n      timeline: periodIndex,\n      time: index * duration\n    };\n  };\n};\n/**\r\n * Returns a list of objects containing segment timing and duration info used for\r\n * building the list of segments. This uses the @duration attribute specified\r\n * in the MPD manifest to derive the range of segments.\r\n *\r\n * @param {Object} attributes\r\n *        Inherited MPD attributes\r\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\r\n *         List of Objects with segment timing and duration info\r\n */\n\n\nvar parseByDuration = function parseByDuration(attributes) {\n  var _attributes$type = attributes.type,\n      type = _attributes$type === void 0 ? 'static' : _attributes$type,\n      duration = attributes.duration,\n      _attributes$timescale4 = attributes.timescale,\n      timescale = _attributes$timescale4 === void 0 ? 1 : _attributes$timescale4,\n      sourceDuration = attributes.sourceDuration;\n\n  var _segmentRange$type = segmentRange[type](attributes),\n      start = _segmentRange$type.start,\n      end = _segmentRange$type.end;\n\n  var segments = range(start, end).map(toSegments(attributes));\n\n  if (type === 'static') {\n    var index = segments.length - 1; // final segment may be less than full segment duration\n\n    segments[index].duration = sourceDuration - duration / timescale * index;\n  }\n\n  return segments;\n};\n/**\r\n * Translates SegmentBase into a set of segments.\r\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\r\n * node should be translated into segment.\r\n *\r\n * @param {Object} attributes\r\n *   Object containing all inherited attributes from parent elements with attribute\r\n *   names as keys\r\n * @return {Object.<Array>} list of segments\r\n */\n\n\nvar segmentsFromBase = function segmentsFromBase(attributes) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$indexRang = attributes.indexRange,\n      indexRange = _attributes$indexRang === void 0 ? '' : _attributes$indexRang,\n      duration = attributes.duration; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\n\n  if (!baseUrl) {\n    throw new Error(errors.NO_BASE_URL);\n  }\n\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: baseUrl,\n    indexRange: indexRange\n  });\n  segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source\n  // (since SegmentBase is only for one total segment)\n\n  if (duration) {\n    var segmentTimeInfo = parseByDuration(attributes);\n\n    if (segmentTimeInfo.length) {\n      segment.duration = segmentTimeInfo[0].duration;\n      segment.timeline = segmentTimeInfo[0].timeline;\n    }\n  } else if (sourceDuration) {\n    segment.duration = sourceDuration;\n    segment.timeline = 0;\n  } // This is used for mediaSequence\n\n\n  segment.number = 0;\n  return [segment];\n};\n/**\r\n * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist\r\n * according to the sidx information given.\r\n *\r\n * playlist.sidx has metadadata about the sidx where-as the sidx param\r\n * is the parsed sidx box itself.\r\n *\r\n * @param {Object} playlist the playlist to update the sidx information for\r\n * @param {Object} sidx the parsed sidx box\r\n * @return {Object} the playlist object with the updated sidx information\r\n */\n\n\nvar addSegmentsToPlaylist = function addSegmentsToPlaylist(playlist, sidx, baseUrl) {\n  // Retain init segment information\n  var initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial master manifest parsing\n\n  var sourceDuration = playlist.sidx.duration; // Retain source timeline\n\n  var timeline = playlist.timeline || 0;\n  var sidxByteRange = playlist.sidx.byterange;\n  var sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx\n\n  var timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes\n\n  var mediaReferences = sidx.references.filter(function (r) {\n    return r.referenceType !== 1;\n  });\n  var segments = []; // firstOffset is the offset from the end of the sidx box\n\n  var startIndex = sidxEnd + sidx.firstOffset;\n\n  for (var i = 0; i < mediaReferences.length; i++) {\n    var reference = sidx.references[i]; // size of the referenced (sub)segment\n\n    var size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale\n    // this will be converted to seconds when generating segments\n\n    var duration = reference.subsegmentDuration; // should be an inclusive range\n\n    var endIndex = startIndex + size - 1;\n    var indexRange = startIndex + \"-\" + endIndex;\n    var attributes = {\n      baseUrl: baseUrl,\n      timescale: timescale,\n      timeline: timeline,\n      // this is used in parseByDuration\n      periodIndex: timeline,\n      duration: duration,\n      sourceDuration: sourceDuration,\n      indexRange: indexRange\n    };\n    var segment = segmentsFromBase(attributes)[0];\n\n    if (initSegment) {\n      segment.map = initSegment;\n    }\n\n    segments.push(segment);\n    startIndex += size;\n  }\n\n  playlist.segments = segments;\n  return playlist;\n};\n\nvar mergeDiscontiguousPlaylists = function mergeDiscontiguousPlaylists(playlists) {\n  var mergedPlaylists = values(playlists.reduce(function (acc, playlist) {\n    // assuming playlist IDs are the same across periods\n    // TODO: handle multiperiod where representation sets are not the same\n    // across periods\n    var name = playlist.attributes.id + (playlist.attributes.lang || ''); // Periods after first\n\n    if (acc[name]) {\n      var _acc$name$segments; // first segment of subsequent periods signal a discontinuity\n\n\n      if (playlist.segments[0]) {\n        playlist.segments[0].discontinuity = true;\n      }\n\n      (_acc$name$segments = acc[name].segments).push.apply(_acc$name$segments, playlist.segments); // bubble up contentProtection, this assumes all DRM content\n      // has the same contentProtection\n\n\n      if (playlist.attributes.contentProtection) {\n        acc[name].attributes.contentProtection = playlist.attributes.contentProtection;\n      }\n    } else {\n      // first Period\n      acc[name] = playlist;\n    }\n\n    return acc;\n  }, {}));\n  return mergedPlaylists.map(function (playlist) {\n    playlist.discontinuityStarts = findIndexes(playlist.segments, 'discontinuity');\n    return playlist;\n  });\n};\n\nvar addSegmentInfoFromSidx = function addSegmentInfoFromSidx(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  if (!Object.keys(sidxMapping).length) {\n    return playlists;\n  }\n\n  for (var i in playlists) {\n    var playlist = playlists[i];\n\n    if (!playlist.sidx) {\n      continue;\n    }\n\n    var sidxKey = playlist.sidx.uri + '-' + byteRangeToString(playlist.sidx.byterange);\n    var sidxMatch = sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;\n\n    if (playlist.sidx && sidxMatch) {\n      addSegmentsToPlaylist(playlist, sidxMatch, playlist.sidx.resolvedUri);\n    }\n  }\n\n  return playlists;\n};\n\nvar formatAudioPlaylist = function formatAudioPlaylist(_ref) {\n  var _attributes;\n\n  var attributes = _ref.attributes,\n      segments = _ref.segments,\n      sidx = _ref.sidx;\n  var playlist = {\n    attributes: (_attributes = {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth,\n      CODECS: attributes.codecs\n    }, _attributes['PROGRAM-ID'] = 1, _attributes),\n    uri: '',\n    endList: (attributes.type || 'static') === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  return playlist;\n};\n\nvar formatVttPlaylist = function formatVttPlaylist(_ref2) {\n  var _m3u8Attributes;\n\n  var attributes = _ref2.attributes,\n      segments = _ref2.segments;\n\n  if (typeof segments === 'undefined') {\n    // vtt tracks may use single file in BaseURL\n    segments = [{\n      uri: attributes.baseUrl,\n      timeline: attributes.periodIndex,\n      resolvedUri: attributes.baseUrl || '',\n      duration: attributes.sourceDuration,\n      number: 0\n    }]; // targetDuration should be the same duration as the only segment\n\n    attributes.duration = attributes.sourceDuration;\n  }\n\n  var m3u8Attributes = (_m3u8Attributes = {\n    NAME: attributes.id,\n    BANDWIDTH: attributes.bandwidth\n  }, _m3u8Attributes['PROGRAM-ID'] = 1, _m3u8Attributes);\n\n  if (attributes.codecs) {\n    m3u8Attributes.CODECS = attributes.codecs;\n  }\n\n  return {\n    attributes: m3u8Attributes,\n    uri: '',\n    endList: (attributes.type || 'static') === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n};\n\nvar organizeAudioPlaylists = function organizeAudioPlaylists(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  var mainPlaylist;\n  var formattedPlaylists = playlists.reduce(function (a, playlist) {\n    var role = playlist.attributes.role && playlist.attributes.role.value || '';\n    var language = playlist.attributes.lang || '';\n    var label = 'main';\n\n    if (language) {\n      var roleLabel = role ? \" (\" + role + \")\" : '';\n      label = \"\" + playlist.attributes.lang + roleLabel;\n    } // skip if we already have the highest quality audio for a language\n\n\n    if (a[label] && a[label].playlists[0].attributes.BANDWIDTH > playlist.attributes.bandwidth) {\n      return a;\n    }\n\n    a[label] = {\n      language: language,\n      autoselect: true,\n      default: role === 'main',\n      playlists: addSegmentInfoFromSidx([formatAudioPlaylist(playlist)], sidxMapping),\n      uri: ''\n    };\n\n    if (typeof mainPlaylist === 'undefined' && role === 'main') {\n      mainPlaylist = playlist;\n      mainPlaylist.default = true;\n    }\n\n    return a;\n  }, {}); // if no playlists have role \"main\", mark the first as main\n\n  if (!mainPlaylist) {\n    var firstLabel = Object.keys(formattedPlaylists)[0];\n    formattedPlaylists[firstLabel].default = true;\n  }\n\n  return formattedPlaylists;\n};\n\nvar organizeVttPlaylists = function organizeVttPlaylists(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  return playlists.reduce(function (a, playlist) {\n    var label = playlist.attributes.lang || 'text'; // skip if we already have subtitles\n\n    if (a[label]) {\n      return a;\n    }\n\n    a[label] = {\n      language: label,\n      default: false,\n      autoselect: false,\n      playlists: addSegmentInfoFromSidx([formatVttPlaylist(playlist)], sidxMapping),\n      uri: ''\n    };\n    return a;\n  }, {});\n};\n\nvar formatVideoPlaylist = function formatVideoPlaylist(_ref3) {\n  var _attributes2;\n\n  var attributes = _ref3.attributes,\n      segments = _ref3.segments,\n      sidx = _ref3.sidx;\n  var playlist = {\n    attributes: (_attributes2 = {\n      NAME: attributes.id,\n      AUDIO: 'audio',\n      SUBTITLES: 'subs',\n      RESOLUTION: {\n        width: attributes.width,\n        height: attributes.height\n      },\n      CODECS: attributes.codecs,\n      BANDWIDTH: attributes.bandwidth\n    }, _attributes2['PROGRAM-ID'] = 1, _attributes2),\n    uri: '',\n    endList: (attributes.type || 'static') === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  return playlist;\n};\n\nvar toM3u8 = function toM3u8(dashPlaylists, locations, sidxMapping) {\n  var _mediaGroups;\n\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  if (!dashPlaylists.length) {\n    return {};\n  } // grab all master attributes\n\n\n  var _dashPlaylists$0$attr = dashPlaylists[0].attributes,\n      duration = _dashPlaylists$0$attr.sourceDuration,\n      _dashPlaylists$0$attr2 = _dashPlaylists$0$attr.type,\n      type = _dashPlaylists$0$attr2 === void 0 ? 'static' : _dashPlaylists$0$attr2,\n      suggestedPresentationDelay = _dashPlaylists$0$attr.suggestedPresentationDelay,\n      minimumUpdatePeriod = _dashPlaylists$0$attr.minimumUpdatePeriod;\n\n  var videoOnly = function videoOnly(_ref4) {\n    var attributes = _ref4.attributes;\n    return attributes.mimeType === 'video/mp4' || attributes.contentType === 'video';\n  };\n\n  var audioOnly = function audioOnly(_ref5) {\n    var attributes = _ref5.attributes;\n    return attributes.mimeType === 'audio/mp4' || attributes.contentType === 'audio';\n  };\n\n  var vttOnly = function vttOnly(_ref6) {\n    var attributes = _ref6.attributes;\n    return attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\n  };\n\n  var videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);\n  var audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));\n  var vttPlaylists = dashPlaylists.filter(vttOnly);\n  var master = {\n    allowCache: true,\n    discontinuityStarts: [],\n    segments: [],\n    endList: true,\n    mediaGroups: (_mediaGroups = {\n      AUDIO: {},\n      VIDEO: {}\n    }, _mediaGroups['CLOSED-CAPTIONS'] = {}, _mediaGroups.SUBTITLES = {}, _mediaGroups),\n    uri: '',\n    duration: duration,\n    playlists: addSegmentInfoFromSidx(videoPlaylists, sidxMapping)\n  };\n\n  if (minimumUpdatePeriod >= 0) {\n    master.minimumUpdatePeriod = minimumUpdatePeriod * 1000;\n  }\n\n  if (locations) {\n    master.locations = locations;\n  }\n\n  if (type === 'dynamic') {\n    master.suggestedPresentationDelay = suggestedPresentationDelay;\n  }\n\n  if (audioPlaylists.length) {\n    master.mediaGroups.AUDIO.audio = organizeAudioPlaylists(audioPlaylists, sidxMapping);\n  }\n\n  if (vttPlaylists.length) {\n    master.mediaGroups.SUBTITLES.subs = organizeVttPlaylists(vttPlaylists, sidxMapping);\n  }\n\n  return master;\n};\n/**\r\n * Calculates the R (repetition) value for a live stream (for the final segment\r\n * in a manifest where the r value is negative 1)\r\n *\r\n * @param {Object} attributes\r\n *        Object containing all inherited attributes from parent elements with attribute\r\n *        names as keys\r\n * @param {number} time\r\n *        current time (typically the total time up until the final segment)\r\n * @param {number} duration\r\n *        duration property for the given <S />\r\n *\r\n * @return {number}\r\n *        R value to reach the end of the given period\r\n */\n\n\nvar getLiveRValue = function getLiveRValue(attributes, time, duration) {\n  var NOW = attributes.NOW,\n      clientOffset = attributes.clientOffset,\n      availabilityStartTime = attributes.availabilityStartTime,\n      _attributes$timescale = attributes.timescale,\n      timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n      _attributes$start = attributes.start,\n      start = _attributes$start === void 0 ? 0 : _attributes$start,\n      _attributes$minimumUp = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp;\n  var now = (NOW + clientOffset) / 1000;\n  var periodStartWC = availabilityStartTime + start;\n  var periodEndWC = now + minimumUpdatePeriod;\n  var periodDuration = periodEndWC - periodStartWC;\n  return Math.ceil((periodDuration * timescale - time) / duration);\n};\n/**\r\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\r\n * timing and duration\r\n *\r\n * @param {Object} attributes\r\n *        Object containing all inherited attributes from parent elements with attribute\r\n *        names as keys\r\n * @param {Object[]} segmentTimeline\r\n *        List of objects representing the attributes of each S element contained within\r\n *\r\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\r\n *         List of Objects with segment timing and duration info\r\n */\n\n\nvar parseByTimeline = function parseByTimeline(attributes, segmentTimeline) {\n  var _attributes$type = attributes.type,\n      type = _attributes$type === void 0 ? 'static' : _attributes$type,\n      _attributes$minimumUp2 = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp2 === void 0 ? 0 : _attributes$minimumUp2,\n      _attributes$media = attributes.media,\n      media = _attributes$media === void 0 ? '' : _attributes$media,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$timescale2 = attributes.timescale,\n      timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n      _attributes$startNumb = attributes.startNumber,\n      startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb,\n      timeline = attributes.periodIndex;\n  var segments = [];\n  var time = -1;\n\n  for (var sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\n    var S = segmentTimeline[sIndex];\n    var duration = S.d;\n    var repeat = S.r || 0;\n    var segmentTime = S.t || 0;\n\n    if (time < 0) {\n      // first segment\n      time = segmentTime;\n    }\n\n    if (segmentTime && segmentTime > time) {\n      // discontinuity\n      // TODO: How to handle this type of discontinuity\n      // timeline++ here would treat it like HLS discontuity and content would\n      // get appended without gap\n      // E.G.\n      //  <S t=\"0\" d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S t=\"5\" d=\"1\" />\n      // would have $Time$ values of [0, 1, 2, 5]\n      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\n      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\n      // does the value of sourceDuration consider this when calculating arbitrary\n      // negative @r repeat value?\n      // E.G. Same elements as above with this added at the end\n      //  <S d=\"1\" r=\"-1\" />\n      //  with a sourceDuration of 10\n      // Would the 2 gaps be included in the time duration calculations resulting in\n      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\n      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\n      time = segmentTime;\n    }\n\n    var count = void 0;\n\n    if (repeat < 0) {\n      var nextS = sIndex + 1;\n\n      if (nextS === segmentTimeline.length) {\n        // last segment\n        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\n          count = getLiveRValue(attributes, time, duration);\n        } else {\n          // TODO: This may be incorrect depending on conclusion of TODO above\n          count = (sourceDuration * timescale - time) / duration;\n        }\n      } else {\n        count = (segmentTimeline[nextS].t - time) / duration;\n      }\n    } else {\n      count = repeat + 1;\n    }\n\n    var end = startNumber + segments.length + count;\n    var number = startNumber + segments.length;\n\n    while (number < end) {\n      segments.push({\n        number: number,\n        duration: duration / timescale,\n        time: time,\n        timeline: timeline\n      });\n      time += duration;\n      number++;\n    }\n  }\n\n  return segments;\n};\n\nvar identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\n/**\r\n * Replaces template identifiers with corresponding values. To be used as the callback\r\n * for String.prototype.replace\r\n *\r\n * @name replaceCallback\r\n * @function\r\n * @param {string} match\r\n *        Entire match of identifier\r\n * @param {string} identifier\r\n *        Name of matched identifier\r\n * @param {string} format\r\n *        Format tag string. Its presence indicates that padding is expected\r\n * @param {string} width\r\n *        Desired length of the replaced value. Values less than this width shall be left\r\n *        zero padded\r\n * @return {string}\r\n *         Replacement for the matched identifier\r\n */\n\n/**\r\n * Returns a function to be used as a callback for String.prototype.replace to replace\r\n * template identifiers\r\n *\r\n * @param {Obect} values\r\n *        Object containing values that shall be used to replace known identifiers\r\n * @param {number} values.RepresentationID\r\n *        Value of the Representation@id attribute\r\n * @param {number} values.Number\r\n *        Number of the corresponding segment\r\n * @param {number} values.Bandwidth\r\n *        Value of the Representation@bandwidth attribute.\r\n * @param {number} values.Time\r\n *        Timestamp value of the corresponding segment\r\n * @return {replaceCallback}\r\n *         Callback to be used with String.prototype.replace to replace identifiers\r\n */\n\nvar identifierReplacement = function identifierReplacement(values) {\n  return function (match, identifier, format, width) {\n    if (match === '$$') {\n      // escape sequence\n      return '$';\n    }\n\n    if (typeof values[identifier] === 'undefined') {\n      return match;\n    }\n\n    var value = '' + values[identifier];\n\n    if (identifier === 'RepresentationID') {\n      // Format tag shall not be present with RepresentationID\n      return value;\n    }\n\n    if (!format) {\n      width = 1;\n    } else {\n      width = parseInt(width, 10);\n    }\n\n    if (value.length >= width) {\n      return value;\n    }\n\n    return \"\" + new Array(width - value.length + 1).join('0') + value;\n  };\n};\n/**\r\n * Constructs a segment url from a template string\r\n *\r\n * @param {string} url\r\n *        Template string to construct url from\r\n * @param {Obect} values\r\n *        Object containing values that shall be used to replace known identifiers\r\n * @param {number} values.RepresentationID\r\n *        Value of the Representation@id attribute\r\n * @param {number} values.Number\r\n *        Number of the corresponding segment\r\n * @param {number} values.Bandwidth\r\n *        Value of the Representation@bandwidth attribute.\r\n * @param {number} values.Time\r\n *        Timestamp value of the corresponding segment\r\n * @return {string}\r\n *         Segment url with identifiers replaced\r\n */\n\n\nvar constructTemplateUrl = function constructTemplateUrl(url, values) {\n  return url.replace(identifierPattern, identifierReplacement(values));\n};\n/**\r\n * Generates a list of objects containing timing and duration information about each\r\n * segment needed to generate segment uris and the complete segment object\r\n *\r\n * @param {Object} attributes\r\n *        Object containing all inherited attributes from parent elements with attribute\r\n *        names as keys\r\n * @param {Object[]|undefined} segmentTimeline\r\n *        List of objects representing the attributes of each S element contained within\r\n *        the SegmentTimeline element\r\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\r\n *         List of Objects with segment timing and duration info\r\n */\n\n\nvar parseTemplateInfo = function parseTemplateInfo(attributes, segmentTimeline) {\n  if (!attributes.duration && !segmentTimeline) {\n    // if neither @duration or SegmentTimeline are present, then there shall be exactly\n    // one media segment\n    return [{\n      number: attributes.startNumber || 1,\n      duration: attributes.sourceDuration,\n      time: 0,\n      timeline: attributes.periodIndex\n    }];\n  }\n\n  if (attributes.duration) {\n    return parseByDuration(attributes);\n  }\n\n  return parseByTimeline(attributes, segmentTimeline);\n};\n/**\r\n * Generates a list of segments using information provided by the SegmentTemplate element\r\n *\r\n * @param {Object} attributes\r\n *        Object containing all inherited attributes from parent elements with attribute\r\n *        names as keys\r\n * @param {Object[]|undefined} segmentTimeline\r\n *        List of objects representing the attributes of each S element contained within\r\n *        the SegmentTimeline element\r\n * @return {Object[]}\r\n *         List of segment objects\r\n */\n\n\nvar segmentsFromTemplate = function segmentsFromTemplate(attributes, segmentTimeline) {\n  var templateValues = {\n    RepresentationID: attributes.id,\n    Bandwidth: attributes.bandwidth || 0\n  };\n  var _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {\n    sourceURL: '',\n    range: ''\n  } : _attributes$initializ;\n  var mapSegment = urlTypeToSegment({\n    baseUrl: attributes.baseUrl,\n    source: constructTemplateUrl(initialization.sourceURL, templateValues),\n    range: initialization.range\n  });\n  var segments = parseTemplateInfo(attributes, segmentTimeline);\n  return segments.map(function (segment) {\n    templateValues.Number = segment.number;\n    templateValues.Time = segment.time;\n    var uri = constructTemplateUrl(attributes.media || '', templateValues);\n    return {\n      uri: uri,\n      timeline: segment.timeline,\n      duration: segment.duration,\n      resolvedUri: resolveUrl(attributes.baseUrl || '', uri),\n      map: mapSegment,\n      number: segment.number\n    };\n  });\n};\n/**\r\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\r\n * to an object that matches the output of a segment in videojs/mpd-parser\r\n *\r\n * @param {Object} attributes\r\n *   Object containing all inherited attributes from parent elements with attribute\r\n *   names as keys\r\n * @param {Object} segmentUrl\r\n *   <SegmentURL> node to translate into a segment object\r\n * @return {Object} translated segment object\r\n */\n\n\nvar SegmentURLToSegmentObject = function SegmentURLToSegmentObject(attributes, segmentUrl) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ;\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: segmentUrl.media,\n    range: segmentUrl.mediaRange\n  });\n  segment.map = initSegment;\n  return segment;\n};\n/**\r\n * Generates a list of segments using information provided by the SegmentList element\r\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\r\n * node should be translated into segment.\r\n *\r\n * @param {Object} attributes\r\n *   Object containing all inherited attributes from parent elements with attribute\r\n *   names as keys\r\n * @param {Object[]|undefined} segmentTimeline\r\n *        List of objects representing the attributes of each S element contained within\r\n *        the SegmentTimeline element\r\n * @return {Object.<Array>} list of segments\r\n */\n\n\nvar segmentsFromList = function segmentsFromList(attributes, segmentTimeline) {\n  var duration = attributes.duration,\n      _attributes$segmentUr = attributes.segmentUrls,\n      segmentUrls = _attributes$segmentUr === void 0 ? [] : _attributes$segmentUr; // Per spec (5.3.9.2.1) no way to determine segment duration OR\n  // if both SegmentTimeline and @duration are defined, it is outside of spec.\n\n  if (!duration && !segmentTimeline || duration && segmentTimeline) {\n    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\n  }\n\n  var segmentUrlMap = segmentUrls.map(function (segmentUrlObject) {\n    return SegmentURLToSegmentObject(attributes, segmentUrlObject);\n  });\n  var segmentTimeInfo;\n\n  if (duration) {\n    segmentTimeInfo = parseByDuration(attributes);\n  }\n\n  if (segmentTimeline) {\n    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\n  }\n\n  var segments = segmentTimeInfo.map(function (segmentTime, index) {\n    if (segmentUrlMap[index]) {\n      var segment = segmentUrlMap[index];\n      segment.timeline = segmentTime.timeline;\n      segment.duration = segmentTime.duration;\n      segment.number = segmentTime.number;\n      return segment;\n    } // Since we're mapping we should get rid of any blank segments (in case\n    // the given SegmentTimeline is handling for more elements than we have\n    // SegmentURLs for).\n\n  }).filter(function (segment) {\n    return segment;\n  });\n  return segments;\n};\n\nvar generateSegments = function generateSegments(_ref) {\n  var attributes = _ref.attributes,\n      segmentInfo = _ref.segmentInfo;\n  var segmentAttributes;\n  var segmentsFn;\n\n  if (segmentInfo.template) {\n    segmentsFn = segmentsFromTemplate;\n    segmentAttributes = merge(attributes, segmentInfo.template);\n  } else if (segmentInfo.base) {\n    segmentsFn = segmentsFromBase;\n    segmentAttributes = merge(attributes, segmentInfo.base);\n  } else if (segmentInfo.list) {\n    segmentsFn = segmentsFromList;\n    segmentAttributes = merge(attributes, segmentInfo.list);\n  }\n\n  var segmentsInfo = {\n    attributes: attributes\n  };\n\n  if (!segmentsFn) {\n    return segmentsInfo;\n  }\n\n  var segments = segmentsFn(segmentAttributes, segmentInfo.timeline); // The @duration attribute will be used to determin the playlist's targetDuration which\n  // must be in seconds. Since we've generated the segment list, we no longer need\n  // @duration to be in @timescale units, so we can convert it here.\n\n  if (segmentAttributes.duration) {\n    var _segmentAttributes = segmentAttributes,\n        duration = _segmentAttributes.duration,\n        _segmentAttributes$ti = _segmentAttributes.timescale,\n        timescale = _segmentAttributes$ti === void 0 ? 1 : _segmentAttributes$ti;\n    segmentAttributes.duration = duration / timescale;\n  } else if (segments.length) {\n    // if there is no @duration attribute, use the largest segment duration as\n    // as target duration\n    segmentAttributes.duration = segments.reduce(function (max, segment) {\n      return Math.max(max, Math.ceil(segment.duration));\n    }, 0);\n  } else {\n    segmentAttributes.duration = 0;\n  }\n\n  segmentsInfo.attributes = segmentAttributes;\n  segmentsInfo.segments = segments; // This is a sidx box without actual segment information\n\n  if (segmentInfo.base && segmentAttributes.indexRange) {\n    segmentsInfo.sidx = segments[0];\n    segmentsInfo.segments = [];\n  }\n\n  return segmentsInfo;\n};\n\nvar toPlaylists = function toPlaylists(representations) {\n  return representations.map(generateSegments);\n};\n\nvar findChildren = function findChildren(element, name) {\n  return from(element.childNodes).filter(function (_ref) {\n    var tagName = _ref.tagName;\n    return tagName === name;\n  });\n};\n\nvar getContent = function getContent(element) {\n  return element.textContent.trim();\n};\n\nvar parseDuration = function parseDuration(str) {\n  var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\n  var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\n  var SECONDS_IN_DAY = 24 * 60 * 60;\n  var SECONDS_IN_HOUR = 60 * 60;\n  var SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S\n\n  var durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\n  var match = durationRegex.exec(str);\n\n  if (!match) {\n    return 0;\n  }\n\n  var _match$slice = match.slice(1),\n      year = _match$slice[0],\n      month = _match$slice[1],\n      day = _match$slice[2],\n      hour = _match$slice[3],\n      minute = _match$slice[4],\n      second = _match$slice[5];\n\n  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\n};\n\nvar parseDate = function parseDate(str) {\n  // Date format without timezone according to ISO 8601\n  // YYY-MM-DDThh:mm:ss.ssssss\n  var dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is\n  // expressed by ending with 'Z'\n\n  if (dateRegex.test(str)) {\n    str += 'Z';\n  }\n\n  return Date.parse(str);\n};\n\nvar parsers = {\n  /**\r\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\r\n   * as specified in ISO 8601\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The duration in seconds\r\n   */\n  mediaPresentationDuration: function mediaPresentationDuration(value) {\n    return parseDuration(value);\n  },\n\n  /**\r\n   * Specifies the Segment availability start time for all Segments referred to in this\r\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\r\n   * time. Format is a date string as specified in ISO 8601\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The date as seconds from unix epoch\r\n   */\n  availabilityStartTime: function availabilityStartTime(value) {\n    return parseDate(value) / 1000;\n  },\n\n  /**\r\n   * Specifies the smallest period between potential changes to the MPD. Format is a\r\n   * duration string as specified in ISO 8601\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The duration in seconds\r\n   */\n  minimumUpdatePeriod: function minimumUpdatePeriod(value) {\n    return parseDuration(value);\n  },\n\n  /**\r\n   * Specifies the suggested presentation delay. Format is a\r\n   * duration string as specified in ISO 8601\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The duration in seconds\r\n   */\n  suggestedPresentationDelay: function suggestedPresentationDelay(value) {\n    return parseDuration(value);\n  },\n\n  /**\r\n   * specifices the type of mpd. Can be either \"static\" or \"dynamic\"\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   *\r\n   * @return {string}\r\n   *         The type as a string\r\n   */\n  type: function type(value) {\n    return value;\n  },\n\n  /**\r\n   * Specifies the duration of the smallest time shifting buffer for any Representation\r\n   * in the MPD. Format is a duration string as specified in ISO 8601\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The duration in seconds\r\n   */\n  timeShiftBufferDepth: function timeShiftBufferDepth(value) {\n    return parseDuration(value);\n  },\n\n  /**\r\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\r\n   * Format is a duration string as specified in ISO 8601\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The duration in seconds\r\n   */\n  start: function start(value) {\n    return parseDuration(value);\n  },\n\n  /**\r\n   * Specifies the width of the visual presentation\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The parsed width\r\n   */\n  width: function width(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\r\n   * Specifies the height of the visual presentation\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The parsed height\r\n   */\n  height: function height(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\r\n   * Specifies the bitrate of the representation\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The parsed bandwidth\r\n   */\n  bandwidth: function bandwidth(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\r\n   * Specifies the number of the first Media Segment in this Representation in the Period\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The parsed number\r\n   */\n  startNumber: function startNumber(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\r\n   * Specifies the timescale in units per seconds\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The aprsed timescale\r\n   */\n  timescale: function timescale(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\r\n   * Specifies the constant approximate Segment duration\r\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\r\n   *       specifies the duration of the Period. This attribute is currently not\r\n   *       supported by the rest of the parser, however we still check for it to prevent\r\n   *       errors.\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The parsed duration\r\n   */\n  duration: function duration(value) {\n    var parsedValue = parseInt(value, 10);\n\n    if (isNaN(parsedValue)) {\n      return parseDuration(value);\n    }\n\n    return parsedValue;\n  },\n\n  /**\r\n   * Specifies the Segment duration, in units of the value of the @timescale.\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The parsed duration\r\n   */\n  d: function d(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\r\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\r\n   * starts relative to the beginning of the Period\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The parsed time\r\n   */\n  t: function t(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\r\n   * Specifies the repeat count of the number of following contiguous Segments with the\r\n   * same duration expressed by the value of @d\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The parsed number\r\n   */\n  r: function r(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\r\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\r\n   * as a string\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {string}\r\n   *         Unparsed value\r\n   */\n  DEFAULT: function DEFAULT(value) {\n    return value;\n  }\n};\n/**\r\n * Gets all the attributes and values of the provided node, parses attributes with known\r\n * types, and returns an object with attribute names mapped to values.\r\n *\r\n * @param {Node} el\r\n *        The node to parse attributes from\r\n * @return {Object}\r\n *         Object with all attributes of el parsed\r\n */\n\nvar parseAttributes = function parseAttributes(el) {\n  if (!(el && el.attributes)) {\n    return {};\n  }\n\n  return from(el.attributes).reduce(function (a, e) {\n    var parseFn = parsers[e.name] || parsers.DEFAULT;\n    a[e.name] = parseFn(e.value);\n    return a;\n  }, {});\n};\n\nvar keySystemsMap = {\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime'\n};\n/**\r\n * Builds a list of urls that is the product of the reference urls and BaseURL values\r\n *\r\n * @param {string[]} referenceUrls\r\n *        List of reference urls to resolve to\r\n * @param {Node[]} baseUrlElements\r\n *        List of BaseURL nodes from the mpd\r\n * @return {string[]}\r\n *         List of resolved urls\r\n */\n\nvar buildBaseUrls = function buildBaseUrls(referenceUrls, baseUrlElements) {\n  if (!baseUrlElements.length) {\n    return referenceUrls;\n  }\n\n  return flatten(referenceUrls.map(function (reference) {\n    return baseUrlElements.map(function (baseUrlElement) {\n      return resolveUrl(reference, getContent(baseUrlElement));\n    });\n  }));\n};\n/**\r\n * Contains all Segment information for its containing AdaptationSet\r\n *\r\n * @typedef {Object} SegmentInformation\r\n * @property {Object|undefined} template\r\n *           Contains the attributes for the SegmentTemplate node\r\n * @property {Object[]|undefined} timeline\r\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\r\n * @property {Object|undefined} list\r\n *           Contains the attributes for the SegmentList node\r\n * @property {Object|undefined} base\r\n *           Contains the attributes for the SegmentBase node\r\n */\n\n/**\r\n * Returns all available Segment information contained within the AdaptationSet node\r\n *\r\n * @param {Node} adaptationSet\r\n *        The AdaptationSet node to get Segment information from\r\n * @return {SegmentInformation}\r\n *         The Segment information contained within the provided AdaptationSet\r\n */\n\n\nvar getSegmentInformation = function getSegmentInformation(adaptationSet) {\n  var segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\n  var segmentList = findChildren(adaptationSet, 'SegmentList')[0];\n  var segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(function (s) {\n    return merge({\n      tag: 'SegmentURL'\n    }, parseAttributes(s));\n  });\n  var segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\n  var segmentTimelineParentNode = segmentList || segmentTemplate;\n  var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\n  var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\n  var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0]; // SegmentTemplate is handled slightly differently, since it can have both\n  // @initialization and an <Initialization> node.  @initialization can be templated,\n  // while the node can have a url and range specified.  If the <SegmentTemplate> has\n  // both @initialization and an <Initialization> subelement we opt to override with\n  // the node, as this interaction is not defined in the spec.\n\n  var template = segmentTemplate && parseAttributes(segmentTemplate);\n\n  if (template && segmentInitialization) {\n    template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\n  } else if (template && template.initialization) {\n    // If it is @initialization we convert it to an object since this is the format that\n    // later functions will rely on for the initialization segment.  This is only valid\n    // for <SegmentTemplate>\n    template.initialization = {\n      sourceURL: template.initialization\n    };\n  }\n\n  var segmentInfo = {\n    template: template,\n    timeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(function (s) {\n      return parseAttributes(s);\n    }),\n    list: segmentList && merge(parseAttributes(segmentList), {\n      segmentUrls: segmentUrls,\n      initialization: parseAttributes(segmentInitialization)\n    }),\n    base: segmentBase && merge(parseAttributes(segmentBase), {\n      initialization: parseAttributes(segmentInitialization)\n    })\n  };\n  Object.keys(segmentInfo).forEach(function (key) {\n    if (!segmentInfo[key]) {\n      delete segmentInfo[key];\n    }\n  });\n  return segmentInfo;\n};\n/**\r\n * Contains Segment information and attributes needed to construct a Playlist object\r\n * from a Representation\r\n *\r\n * @typedef {Object} RepresentationInformation\r\n * @property {SegmentInformation} segmentInfo\r\n *           Segment information for this Representation\r\n * @property {Object} attributes\r\n *           Inherited attributes for this Representation\r\n */\n\n/**\r\n * Maps a Representation node to an object containing Segment information and attributes\r\n *\r\n * @name inheritBaseUrlsCallback\r\n * @function\r\n * @param {Node} representation\r\n *        Representation node from the mpd\r\n * @return {RepresentationInformation}\r\n *         Representation information needed to construct a Playlist object\r\n */\n\n/**\r\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\r\n * Segment information and attributes using inherited BaseURL nodes.\r\n *\r\n * @param {Object} adaptationSetAttributes\r\n *        Contains attributes inherited by the AdaptationSet\r\n * @param {string[]} adaptationSetBaseUrls\r\n *        Contains list of resolved base urls inherited by the AdaptationSet\r\n * @param {SegmentInformation} adaptationSetSegmentInfo\r\n *        Contains Segment information for the AdaptationSet\r\n * @return {inheritBaseUrlsCallback}\r\n *         Callback map function\r\n */\n\n\nvar inheritBaseUrls = function inheritBaseUrls(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {\n  return function (representation) {\n    var repBaseUrlElements = findChildren(representation, 'BaseURL');\n    var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\n    var attributes = merge(adaptationSetAttributes, parseAttributes(representation));\n    var representationSegmentInfo = getSegmentInformation(representation);\n    return repBaseUrls.map(function (baseUrl) {\n      return {\n        segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\n        attributes: merge(attributes, {\n          baseUrl: baseUrl\n        })\n      };\n    });\n  };\n};\n/**\r\n * Tranforms a series of content protection nodes to\r\n * an object containing pssh data by key system\r\n *\r\n * @param {Node[]} contentProtectionNodes\r\n *        Content protection nodes\r\n * @return {Object}\r\n *        Object containing pssh data by key system\r\n */\n\n\nvar generateKeySystemInformation = function generateKeySystemInformation(contentProtectionNodes) {\n  return contentProtectionNodes.reduce(function (acc, node) {\n    var attributes = parseAttributes(node);\n    var keySystem = keySystemsMap[attributes.schemeIdUri];\n\n    if (keySystem) {\n      acc[keySystem] = {\n        attributes: attributes\n      };\n      var psshNode = findChildren(node, 'cenc:pssh')[0];\n\n      if (psshNode) {\n        var pssh = getContent(psshNode);\n        var psshBuffer = pssh && decodeB64ToUint8Array(pssh);\n        acc[keySystem].pssh = psshBuffer;\n      }\n    }\n\n    return acc;\n  }, {});\n};\n/**\r\n * Maps an AdaptationSet node to a list of Representation information objects\r\n *\r\n * @name toRepresentationsCallback\r\n * @function\r\n * @param {Node} adaptationSet\r\n *        AdaptationSet node from the mpd\r\n * @return {RepresentationInformation[]}\r\n *         List of objects containing Representaion information\r\n */\n\n/**\r\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\r\n * Representation information objects\r\n *\r\n * @param {Object} periodAttributes\r\n *        Contains attributes inherited by the Period\r\n * @param {string[]} periodBaseUrls\r\n *        Contains list of resolved base urls inherited by the Period\r\n * @param {string[]} periodSegmentInfo\r\n *        Contains Segment Information at the period level\r\n * @return {toRepresentationsCallback}\r\n *         Callback map function\r\n */\n\n\nvar toRepresentations = function toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo) {\n  return function (adaptationSet) {\n    var adaptationSetAttributes = parseAttributes(adaptationSet);\n    var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\n    var role = findChildren(adaptationSet, 'Role')[0];\n    var roleAttributes = {\n      role: parseAttributes(role)\n    };\n    var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\n    var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\n\n    if (Object.keys(contentProtection).length) {\n      attrs = merge(attrs, {\n        contentProtection: contentProtection\n      });\n    }\n\n    var segmentInfo = getSegmentInformation(adaptationSet);\n    var representations = findChildren(adaptationSet, 'Representation');\n    var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\n    return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\n  };\n};\n/**\r\n * Maps an Period node to a list of Representation inforamtion objects for all\r\n * AdaptationSet nodes contained within the Period\r\n *\r\n * @name toAdaptationSetsCallback\r\n * @function\r\n * @param {Node} period\r\n *        Period node from the mpd\r\n * @param {number} periodIndex\r\n *        Index of the Period within the mpd\r\n * @return {RepresentationInformation[]}\r\n *         List of objects containing Representaion information\r\n */\n\n/**\r\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\r\n * Representation information objects\r\n *\r\n * @param {Object} mpdAttributes\r\n *        Contains attributes inherited by the mpd\r\n * @param {string[]} mpdBaseUrls\r\n *        Contains list of resolved base urls inherited by the mpd\r\n * @return {toAdaptationSetsCallback}\r\n *         Callback map function\r\n */\n\n\nvar toAdaptationSets = function toAdaptationSets(mpdAttributes, mpdBaseUrls) {\n  return function (period, index) {\n    var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period, 'BaseURL'));\n    var periodAtt = parseAttributes(period);\n    var parsedPeriodId = parseInt(periodAtt.id, 10); // fallback to mapping index if Period@id is not a number\n\n    var periodIndex = window.isNaN(parsedPeriodId) ? index : parsedPeriodId;\n    var periodAttributes = merge(mpdAttributes, {\n      periodIndex: periodIndex\n    });\n    var adaptationSets = findChildren(period, 'AdaptationSet');\n    var periodSegmentInfo = getSegmentInformation(period);\n    return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\n  };\n};\n/**\r\n * Traverses the mpd xml tree to generate a list of Representation information objects\r\n * that have inherited attributes from parent nodes\r\n *\r\n * @param {Node} mpd\r\n *        The root node of the mpd\r\n * @param {Object} options\r\n *        Available options for inheritAttributes\r\n * @param {string} options.manifestUri\r\n *        The uri source of the mpd\r\n * @param {number} options.NOW\r\n *        Current time per DASH IOP.  Default is current time in ms since epoch\r\n * @param {number} options.clientOffset\r\n *        Client time difference from NOW (in milliseconds)\r\n * @return {RepresentationInformation[]}\r\n *         List of objects containing Representation information\r\n */\n\n\nvar inheritAttributes = function inheritAttributes(mpd, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$manifestUri = _options.manifestUri,\n      manifestUri = _options$manifestUri === void 0 ? '' : _options$manifestUri,\n      _options$NOW = _options.NOW,\n      NOW = _options$NOW === void 0 ? Date.now() : _options$NOW,\n      _options$clientOffset = _options.clientOffset,\n      clientOffset = _options$clientOffset === void 0 ? 0 : _options$clientOffset;\n  var periods = findChildren(mpd, 'Period');\n\n  if (!periods.length) {\n    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\n  }\n\n  var locations = findChildren(mpd, 'Location');\n  var mpdAttributes = parseAttributes(mpd);\n  var mpdBaseUrls = buildBaseUrls([manifestUri], findChildren(mpd, 'BaseURL'));\n  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\n  mpdAttributes.NOW = NOW;\n  mpdAttributes.clientOffset = clientOffset;\n\n  if (locations.length) {\n    mpdAttributes.locations = locations.map(getContent);\n  }\n\n  return {\n    locations: mpdAttributes.locations,\n    representationInfo: flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls)))\n  };\n};\n\nvar stringToMpdXml = function stringToMpdXml(manifestString) {\n  if (manifestString === '') {\n    throw new Error(errors.DASH_EMPTY_MANIFEST);\n  }\n\n  var parser = new DOMParser();\n  var xml = parser.parseFromString(manifestString, 'application/xml');\n  var mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\n\n  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\n    throw new Error(errors.DASH_INVALID_XML);\n  }\n\n  return mpd;\n};\n/**\r\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\r\n *\r\n * @param {string} mpd\r\n *        XML string of the MPD manifest\r\n * @return {Object|null}\r\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\r\n */\n\n\nvar parseUTCTimingScheme = function parseUTCTimingScheme(mpd) {\n  var UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\n\n  if (!UTCTimingNode) {\n    return null;\n  }\n\n  var attributes = parseAttributes(UTCTimingNode);\n\n  switch (attributes.schemeIdUri) {\n    case 'urn:mpeg:dash:utc:http-head:2014':\n    case 'urn:mpeg:dash:utc:http-head:2012':\n      attributes.method = 'HEAD';\n      break;\n\n    case 'urn:mpeg:dash:utc:http-xsdate:2014':\n    case 'urn:mpeg:dash:utc:http-iso:2014':\n    case 'urn:mpeg:dash:utc:http-xsdate:2012':\n    case 'urn:mpeg:dash:utc:http-iso:2012':\n      attributes.method = 'GET';\n      break;\n\n    case 'urn:mpeg:dash:utc:direct:2014':\n    case 'urn:mpeg:dash:utc:direct:2012':\n      attributes.method = 'DIRECT';\n      attributes.value = Date.parse(attributes.value);\n      break;\n\n    case 'urn:mpeg:dash:utc:http-ntp:2014':\n    case 'urn:mpeg:dash:utc:ntp:2014':\n    case 'urn:mpeg:dash:utc:sntp:2014':\n    default:\n      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\n  }\n\n  return attributes;\n};\n\nvar VERSION = version;\n\nvar parse = function parse(manifestString, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var parsedManifestInfo = inheritAttributes(stringToMpdXml(manifestString), options);\n  var playlists = toPlaylists(parsedManifestInfo.representationInfo);\n  return toM3u8(playlists, parsedManifestInfo.locations, options.sidxMapping);\n};\n/**\r\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\r\n *\r\n * @param {string} manifestString\r\n *        XML string of the MPD manifest\r\n * @return {Object|null}\r\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\r\n */\n\n\nvar parseUTCTiming = function parseUTCTiming(manifestString) {\n  return parseUTCTimingScheme(stringToMpdXml(manifestString));\n};\n\nexport { VERSION, inheritAttributes, parse, parseUTCTiming, stringToMpdXml, toM3u8, toPlaylists };","map":{"version":3,"sources":["C:/Users/rodet/Documents/GitHub/but-project/node_modules/mpd-parser/dist/mpd-parser.es.js"],"names":["resolveUrl","window","decodeB64ToUint8Array","DOMParser","version","isObject","obj","merge","_len","arguments","length","objects","Array","_key","reduce","result","source","Object","keys","forEach","key","isArray","concat","values","o","map","k","range","start","end","i","push","flatten","lists","x","y","from","list","findIndexes","l","a","e","errors","INVALID_NUMBER_OF_PERIOD","DASH_EMPTY_MANIFEST","DASH_INVALID_XML","NO_BASE_URL","MISSING_SEGMENT_INFORMATION","SEGMENT_TIME_UNSPECIFIED","UNSUPPORTED_UTC_TIMING_SCHEME","urlTypeToSegment","_ref","_ref$baseUrl","baseUrl","_ref$source","_ref$range","_ref$indexRange","indexRange","segment","uri","resolvedUri","rangeStr","ranges","split","startRange","parseInt","endRange","byterange","offset","byteRangeToString","segmentRange","static","_static","attributes","duration","_attributes$timescale","timescale","sourceDuration","Math","ceil","dynamic","NOW","clientOffset","availabilityStartTime","_attributes$timescale2","_attributes$start","_attributes$minimumUp","minimumUpdatePeriod","_attributes$timeShift","timeShiftBufferDepth","Infinity","now","periodStartWC","periodEndWC","periodDuration","segmentCount","availableStart","floor","availableEnd","max","min","toSegments","number","index","_attributes$timescale3","periodIndex","_attributes$startNumb","startNumber","timeline","time","parseByDuration","_attributes$type","type","_attributes$timescale4","_segmentRange$type","segments","segmentsFromBase","_attributes$initializ","initialization","_attributes$indexRang","Error","initSegment","sourceURL","segmentTimeInfo","addSegmentsToPlaylist","playlist","sidx","sidxByteRange","sidxEnd","mediaReferences","references","filter","r","referenceType","startIndex","firstOffset","reference","size","referencedSize","subsegmentDuration","endIndex","mergeDiscontiguousPlaylists","playlists","mergedPlaylists","acc","name","id","lang","_acc$name$segments","discontinuity","apply","contentProtection","discontinuityStarts","addSegmentInfoFromSidx","sidxMapping","sidxKey","sidxMatch","formatAudioPlaylist","_attributes","NAME","BANDWIDTH","bandwidth","CODECS","codecs","endList","targetDuration","mediaSequence","formatVttPlaylist","_ref2","_m3u8Attributes","m3u8Attributes","organizeAudioPlaylists","mainPlaylist","formattedPlaylists","role","value","language","label","roleLabel","autoselect","default","firstLabel","organizeVttPlaylists","formatVideoPlaylist","_ref3","_attributes2","AUDIO","SUBTITLES","RESOLUTION","width","height","toM3u8","dashPlaylists","locations","_mediaGroups","_dashPlaylists$0$attr","_dashPlaylists$0$attr2","suggestedPresentationDelay","videoOnly","_ref4","mimeType","contentType","audioOnly","_ref5","vttOnly","_ref6","videoPlaylists","audioPlaylists","vttPlaylists","master","allowCache","mediaGroups","VIDEO","audio","subs","getLiveRValue","parseByTimeline","segmentTimeline","_attributes$minimumUp2","_attributes$media","media","sIndex","S","d","repeat","segmentTime","t","count","nextS","indexOf","identifierPattern","identifierReplacement","match","identifier","format","join","constructTemplateUrl","url","replace","parseTemplateInfo","segmentsFromTemplate","templateValues","RepresentationID","Bandwidth","mapSegment","Number","Time","SegmentURLToSegmentObject","segmentUrl","mediaRange","segmentsFromList","_attributes$segmentUr","segmentUrls","segmentUrlMap","segmentUrlObject","generateSegments","segmentInfo","segmentAttributes","segmentsFn","template","base","segmentsInfo","_segmentAttributes","_segmentAttributes$ti","toPlaylists","representations","findChildren","element","childNodes","tagName","getContent","textContent","trim","parseDuration","str","SECONDS_IN_YEAR","SECONDS_IN_MONTH","SECONDS_IN_DAY","SECONDS_IN_HOUR","SECONDS_IN_MIN","durationRegex","exec","_match$slice","slice","year","month","day","hour","minute","second","parseFloat","parseDate","dateRegex","test","Date","parse","parsers","mediaPresentationDuration","parsedValue","isNaN","DEFAULT","parseAttributes","el","parseFn","keySystemsMap","buildBaseUrls","referenceUrls","baseUrlElements","baseUrlElement","getSegmentInformation","adaptationSet","segmentTemplate","segmentList","s","tag","segmentBase","segmentTimelineParentNode","segmentInitializationParentNode","segmentInitialization","inheritBaseUrls","adaptationSetAttributes","adaptationSetBaseUrls","adaptationSetSegmentInfo","representation","repBaseUrlElements","repBaseUrls","representationSegmentInfo","generateKeySystemInformation","contentProtectionNodes","node","keySystem","schemeIdUri","psshNode","pssh","psshBuffer","toRepresentations","periodAttributes","periodBaseUrls","periodSegmentInfo","roleAttributes","attrs","toAdaptationSets","mpdAttributes","mpdBaseUrls","period","periodAtt","parsedPeriodId","adaptationSets","inheritAttributes","mpd","options","_options","_options$manifestUri","manifestUri","_options$NOW","_options$clientOffset","periods","representationInfo","stringToMpdXml","manifestString","parser","xml","parseFromString","documentElement","getElementsByTagName","parseUTCTimingScheme","UTCTimingNode","method","VERSION","parsedManifestInfo","parseUTCTiming"],"mappings":"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","sourcesContent":["/*! @name mpd-parser @version 0.14.0 @license Apache-2.0 */\r\nimport resolveUrl from '@videojs/vhs-utils/dist/resolve-url';\r\nimport window from 'global/window';\r\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/dist/decode-b64-to-uint8-array';\r\nimport { DOMParser } from 'xmldom';\r\n\r\nvar version = \"0.14.0\";\r\n\r\nvar isObject = function isObject(obj) {\r\n  return !!obj && typeof obj === 'object';\r\n};\r\n\r\nvar merge = function merge() {\r\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\r\n    objects[_key] = arguments[_key];\r\n  }\r\n\r\n  return objects.reduce(function (result, source) {\r\n    Object.keys(source).forEach(function (key) {\r\n      if (Array.isArray(result[key]) && Array.isArray(source[key])) {\r\n        result[key] = result[key].concat(source[key]);\r\n      } else if (isObject(result[key]) && isObject(source[key])) {\r\n        result[key] = merge(result[key], source[key]);\r\n      } else {\r\n        result[key] = source[key];\r\n      }\r\n    });\r\n    return result;\r\n  }, {});\r\n};\r\nvar values = function values(o) {\r\n  return Object.keys(o).map(function (k) {\r\n    return o[k];\r\n  });\r\n};\r\n\r\nvar range = function range(start, end) {\r\n  var result = [];\r\n\r\n  for (var i = start; i < end; i++) {\r\n    result.push(i);\r\n  }\r\n\r\n  return result;\r\n};\r\nvar flatten = function flatten(lists) {\r\n  return lists.reduce(function (x, y) {\r\n    return x.concat(y);\r\n  }, []);\r\n};\r\nvar from = function from(list) {\r\n  if (!list.length) {\r\n    return [];\r\n  }\r\n\r\n  var result = [];\r\n\r\n  for (var i = 0; i < list.length; i++) {\r\n    result.push(list[i]);\r\n  }\r\n\r\n  return result;\r\n};\r\nvar findIndexes = function findIndexes(l, key) {\r\n  return l.reduce(function (a, e, i) {\r\n    if (e[key]) {\r\n      a.push(i);\r\n    }\r\n\r\n    return a;\r\n  }, []);\r\n};\r\n\r\nvar errors = {\r\n  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\r\n  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\r\n  DASH_INVALID_XML: 'DASH_INVALID_XML',\r\n  NO_BASE_URL: 'NO_BASE_URL',\r\n  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\r\n  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\r\n  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\r\n};\r\n\r\n/**\r\n * @typedef {Object} SingleUri\r\n * @property {string} uri - relative location of segment\r\n * @property {string} resolvedUri - resolved location of segment\r\n * @property {Object} byterange - Object containing information on how to make byte range\r\n *   requests following byte-range-spec per RFC2616.\r\n * @property {String} byterange.length - length of range request\r\n * @property {String} byterange.offset - byte offset of range request\r\n *\r\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\r\n */\r\n\r\n/**\r\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\r\n * that conforms to how m3u8-parser is structured\r\n *\r\n * @see https://github.com/videojs/m3u8-parser\r\n *\r\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\r\n * @param {string} source - source url for segment\r\n * @param {string} range - optional range used for range calls,\r\n *   follows  RFC 2616, Clause 14.35.1\r\n * @return {SingleUri} full segment information transformed into a format similar\r\n *   to m3u8-parser\r\n */\r\n\r\nvar urlTypeToSegment = function urlTypeToSegment(_ref) {\r\n  var _ref$baseUrl = _ref.baseUrl,\r\n      baseUrl = _ref$baseUrl === void 0 ? '' : _ref$baseUrl,\r\n      _ref$source = _ref.source,\r\n      source = _ref$source === void 0 ? '' : _ref$source,\r\n      _ref$range = _ref.range,\r\n      range = _ref$range === void 0 ? '' : _ref$range,\r\n      _ref$indexRange = _ref.indexRange,\r\n      indexRange = _ref$indexRange === void 0 ? '' : _ref$indexRange;\r\n  var segment = {\r\n    uri: source,\r\n    resolvedUri: resolveUrl(baseUrl || '', source)\r\n  };\r\n\r\n  if (range || indexRange) {\r\n    var rangeStr = range ? range : indexRange;\r\n    var ranges = rangeStr.split('-');\r\n    var startRange = parseInt(ranges[0], 10);\r\n    var endRange = parseInt(ranges[1], 10); // byterange should be inclusive according to\r\n    // RFC 2616, Clause 14.35.1\r\n\r\n    segment.byterange = {\r\n      length: endRange - startRange + 1,\r\n      offset: startRange\r\n    };\r\n  }\r\n\r\n  return segment;\r\n};\r\nvar byteRangeToString = function byteRangeToString(byterange) {\r\n  // `endRange` is one less than `offset + length` because the HTTP range\r\n  // header uses inclusive ranges\r\n  var endRange = byterange.offset + byterange.length - 1;\r\n  return byterange.offset + \"-\" + endRange;\r\n};\r\n\r\n/**\r\n * Functions for calculating the range of available segments in static and dynamic\r\n * manifests.\r\n */\r\n\r\nvar segmentRange = {\r\n  /**\r\n   * Returns the entire range of available segments for a static MPD\r\n   *\r\n   * @param {Object} attributes\r\n   *        Inheritied MPD attributes\r\n   * @return {{ start: number, end: number }}\r\n   *         The start and end numbers for available segments\r\n   */\r\n  static: function _static(attributes) {\r\n    var duration = attributes.duration,\r\n        _attributes$timescale = attributes.timescale,\r\n        timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\r\n        sourceDuration = attributes.sourceDuration;\r\n    return {\r\n      start: 0,\r\n      end: Math.ceil(sourceDuration / (duration / timescale))\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Returns the current live window range of available segments for a dynamic MPD\r\n   *\r\n   * @param {Object} attributes\r\n   *        Inheritied MPD attributes\r\n   * @return {{ start: number, end: number }}\r\n   *         The start and end numbers for available segments\r\n   */\r\n  dynamic: function dynamic(attributes) {\r\n    var NOW = attributes.NOW,\r\n        clientOffset = attributes.clientOffset,\r\n        availabilityStartTime = attributes.availabilityStartTime,\r\n        _attributes$timescale2 = attributes.timescale,\r\n        timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\r\n        duration = attributes.duration,\r\n        _attributes$start = attributes.start,\r\n        start = _attributes$start === void 0 ? 0 : _attributes$start,\r\n        _attributes$minimumUp = attributes.minimumUpdatePeriod,\r\n        minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp,\r\n        _attributes$timeShift = attributes.timeShiftBufferDepth,\r\n        timeShiftBufferDepth = _attributes$timeShift === void 0 ? Infinity : _attributes$timeShift;\r\n    var now = (NOW + clientOffset) / 1000;\r\n    var periodStartWC = availabilityStartTime + start;\r\n    var periodEndWC = now + minimumUpdatePeriod;\r\n    var periodDuration = periodEndWC - periodStartWC;\r\n    var segmentCount = Math.ceil(periodDuration * timescale / duration);\r\n    var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\r\n    var availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\r\n    return {\r\n      start: Math.max(0, availableStart),\r\n      end: Math.min(segmentCount, availableEnd)\r\n    };\r\n  }\r\n};\r\n/**\r\n * Maps a range of numbers to objects with information needed to build the corresponding\r\n * segment list\r\n *\r\n * @name toSegmentsCallback\r\n * @function\r\n * @param {number} number\r\n *        Number of the segment\r\n * @param {number} index\r\n *        Index of the number in the range list\r\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\r\n *         Object with segment timing and duration info\r\n */\r\n\r\n/**\r\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\r\n * information needed to build the segment list.\r\n *\r\n * @param {Object} attributes\r\n *        Inherited MPD attributes\r\n * @return {toSegmentsCallback}\r\n *         Callback map function\r\n */\r\n\r\nvar toSegments = function toSegments(attributes) {\r\n  return function (number, index) {\r\n    var duration = attributes.duration,\r\n        _attributes$timescale3 = attributes.timescale,\r\n        timescale = _attributes$timescale3 === void 0 ? 1 : _attributes$timescale3,\r\n        periodIndex = attributes.periodIndex,\r\n        _attributes$startNumb = attributes.startNumber,\r\n        startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb;\r\n    return {\r\n      number: startNumber + number,\r\n      duration: duration / timescale,\r\n      timeline: periodIndex,\r\n      time: index * duration\r\n    };\r\n  };\r\n};\r\n/**\r\n * Returns a list of objects containing segment timing and duration info used for\r\n * building the list of segments. This uses the @duration attribute specified\r\n * in the MPD manifest to derive the range of segments.\r\n *\r\n * @param {Object} attributes\r\n *        Inherited MPD attributes\r\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\r\n *         List of Objects with segment timing and duration info\r\n */\r\n\r\nvar parseByDuration = function parseByDuration(attributes) {\r\n  var _attributes$type = attributes.type,\r\n      type = _attributes$type === void 0 ? 'static' : _attributes$type,\r\n      duration = attributes.duration,\r\n      _attributes$timescale4 = attributes.timescale,\r\n      timescale = _attributes$timescale4 === void 0 ? 1 : _attributes$timescale4,\r\n      sourceDuration = attributes.sourceDuration;\r\n\r\n  var _segmentRange$type = segmentRange[type](attributes),\r\n      start = _segmentRange$type.start,\r\n      end = _segmentRange$type.end;\r\n\r\n  var segments = range(start, end).map(toSegments(attributes));\r\n\r\n  if (type === 'static') {\r\n    var index = segments.length - 1; // final segment may be less than full segment duration\r\n\r\n    segments[index].duration = sourceDuration - duration / timescale * index;\r\n  }\r\n\r\n  return segments;\r\n};\r\n\r\n/**\r\n * Translates SegmentBase into a set of segments.\r\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\r\n * node should be translated into segment.\r\n *\r\n * @param {Object} attributes\r\n *   Object containing all inherited attributes from parent elements with attribute\r\n *   names as keys\r\n * @return {Object.<Array>} list of segments\r\n */\r\n\r\nvar segmentsFromBase = function segmentsFromBase(attributes) {\r\n  var baseUrl = attributes.baseUrl,\r\n      _attributes$initializ = attributes.initialization,\r\n      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ,\r\n      sourceDuration = attributes.sourceDuration,\r\n      _attributes$indexRang = attributes.indexRange,\r\n      indexRange = _attributes$indexRang === void 0 ? '' : _attributes$indexRang,\r\n      duration = attributes.duration; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\r\n\r\n  if (!baseUrl) {\r\n    throw new Error(errors.NO_BASE_URL);\r\n  }\r\n\r\n  var initSegment = urlTypeToSegment({\r\n    baseUrl: baseUrl,\r\n    source: initialization.sourceURL,\r\n    range: initialization.range\r\n  });\r\n  var segment = urlTypeToSegment({\r\n    baseUrl: baseUrl,\r\n    source: baseUrl,\r\n    indexRange: indexRange\r\n  });\r\n  segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source\r\n  // (since SegmentBase is only for one total segment)\r\n\r\n  if (duration) {\r\n    var segmentTimeInfo = parseByDuration(attributes);\r\n\r\n    if (segmentTimeInfo.length) {\r\n      segment.duration = segmentTimeInfo[0].duration;\r\n      segment.timeline = segmentTimeInfo[0].timeline;\r\n    }\r\n  } else if (sourceDuration) {\r\n    segment.duration = sourceDuration;\r\n    segment.timeline = 0;\r\n  } // This is used for mediaSequence\r\n\r\n\r\n  segment.number = 0;\r\n  return [segment];\r\n};\r\n/**\r\n * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist\r\n * according to the sidx information given.\r\n *\r\n * playlist.sidx has metadadata about the sidx where-as the sidx param\r\n * is the parsed sidx box itself.\r\n *\r\n * @param {Object} playlist the playlist to update the sidx information for\r\n * @param {Object} sidx the parsed sidx box\r\n * @return {Object} the playlist object with the updated sidx information\r\n */\r\n\r\nvar addSegmentsToPlaylist = function addSegmentsToPlaylist(playlist, sidx, baseUrl) {\r\n  // Retain init segment information\r\n  var initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial master manifest parsing\r\n\r\n  var sourceDuration = playlist.sidx.duration; // Retain source timeline\r\n\r\n  var timeline = playlist.timeline || 0;\r\n  var sidxByteRange = playlist.sidx.byterange;\r\n  var sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx\r\n\r\n  var timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes\r\n\r\n  var mediaReferences = sidx.references.filter(function (r) {\r\n    return r.referenceType !== 1;\r\n  });\r\n  var segments = []; // firstOffset is the offset from the end of the sidx box\r\n\r\n  var startIndex = sidxEnd + sidx.firstOffset;\r\n\r\n  for (var i = 0; i < mediaReferences.length; i++) {\r\n    var reference = sidx.references[i]; // size of the referenced (sub)segment\r\n\r\n    var size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale\r\n    // this will be converted to seconds when generating segments\r\n\r\n    var duration = reference.subsegmentDuration; // should be an inclusive range\r\n\r\n    var endIndex = startIndex + size - 1;\r\n    var indexRange = startIndex + \"-\" + endIndex;\r\n    var attributes = {\r\n      baseUrl: baseUrl,\r\n      timescale: timescale,\r\n      timeline: timeline,\r\n      // this is used in parseByDuration\r\n      periodIndex: timeline,\r\n      duration: duration,\r\n      sourceDuration: sourceDuration,\r\n      indexRange: indexRange\r\n    };\r\n    var segment = segmentsFromBase(attributes)[0];\r\n\r\n    if (initSegment) {\r\n      segment.map = initSegment;\r\n    }\r\n\r\n    segments.push(segment);\r\n    startIndex += size;\r\n  }\r\n\r\n  playlist.segments = segments;\r\n  return playlist;\r\n};\r\n\r\nvar mergeDiscontiguousPlaylists = function mergeDiscontiguousPlaylists(playlists) {\r\n  var mergedPlaylists = values(playlists.reduce(function (acc, playlist) {\r\n    // assuming playlist IDs are the same across periods\r\n    // TODO: handle multiperiod where representation sets are not the same\r\n    // across periods\r\n    var name = playlist.attributes.id + (playlist.attributes.lang || ''); // Periods after first\r\n\r\n    if (acc[name]) {\r\n      var _acc$name$segments;\r\n\r\n      // first segment of subsequent periods signal a discontinuity\r\n      if (playlist.segments[0]) {\r\n        playlist.segments[0].discontinuity = true;\r\n      }\r\n\r\n      (_acc$name$segments = acc[name].segments).push.apply(_acc$name$segments, playlist.segments); // bubble up contentProtection, this assumes all DRM content\r\n      // has the same contentProtection\r\n\r\n\r\n      if (playlist.attributes.contentProtection) {\r\n        acc[name].attributes.contentProtection = playlist.attributes.contentProtection;\r\n      }\r\n    } else {\r\n      // first Period\r\n      acc[name] = playlist;\r\n    }\r\n\r\n    return acc;\r\n  }, {}));\r\n  return mergedPlaylists.map(function (playlist) {\r\n    playlist.discontinuityStarts = findIndexes(playlist.segments, 'discontinuity');\r\n    return playlist;\r\n  });\r\n};\r\n\r\nvar addSegmentInfoFromSidx = function addSegmentInfoFromSidx(playlists, sidxMapping) {\r\n  if (sidxMapping === void 0) {\r\n    sidxMapping = {};\r\n  }\r\n\r\n  if (!Object.keys(sidxMapping).length) {\r\n    return playlists;\r\n  }\r\n\r\n  for (var i in playlists) {\r\n    var playlist = playlists[i];\r\n\r\n    if (!playlist.sidx) {\r\n      continue;\r\n    }\r\n\r\n    var sidxKey = playlist.sidx.uri + '-' + byteRangeToString(playlist.sidx.byterange);\r\n    var sidxMatch = sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;\r\n\r\n    if (playlist.sidx && sidxMatch) {\r\n      addSegmentsToPlaylist(playlist, sidxMatch, playlist.sidx.resolvedUri);\r\n    }\r\n  }\r\n\r\n  return playlists;\r\n};\r\n\r\nvar formatAudioPlaylist = function formatAudioPlaylist(_ref) {\r\n  var _attributes;\r\n\r\n  var attributes = _ref.attributes,\r\n      segments = _ref.segments,\r\n      sidx = _ref.sidx;\r\n  var playlist = {\r\n    attributes: (_attributes = {\r\n      NAME: attributes.id,\r\n      BANDWIDTH: attributes.bandwidth,\r\n      CODECS: attributes.codecs\r\n    }, _attributes['PROGRAM-ID'] = 1, _attributes),\r\n    uri: '',\r\n    endList: (attributes.type || 'static') === 'static',\r\n    timeline: attributes.periodIndex,\r\n    resolvedUri: '',\r\n    targetDuration: attributes.duration,\r\n    segments: segments,\r\n    mediaSequence: segments.length ? segments[0].number : 1\r\n  };\r\n\r\n  if (attributes.contentProtection) {\r\n    playlist.contentProtection = attributes.contentProtection;\r\n  }\r\n\r\n  if (sidx) {\r\n    playlist.sidx = sidx;\r\n  }\r\n\r\n  return playlist;\r\n};\r\nvar formatVttPlaylist = function formatVttPlaylist(_ref2) {\r\n  var _m3u8Attributes;\r\n\r\n  var attributes = _ref2.attributes,\r\n      segments = _ref2.segments;\r\n\r\n  if (typeof segments === 'undefined') {\r\n    // vtt tracks may use single file in BaseURL\r\n    segments = [{\r\n      uri: attributes.baseUrl,\r\n      timeline: attributes.periodIndex,\r\n      resolvedUri: attributes.baseUrl || '',\r\n      duration: attributes.sourceDuration,\r\n      number: 0\r\n    }]; // targetDuration should be the same duration as the only segment\r\n\r\n    attributes.duration = attributes.sourceDuration;\r\n  }\r\n\r\n  var m3u8Attributes = (_m3u8Attributes = {\r\n    NAME: attributes.id,\r\n    BANDWIDTH: attributes.bandwidth\r\n  }, _m3u8Attributes['PROGRAM-ID'] = 1, _m3u8Attributes);\r\n\r\n  if (attributes.codecs) {\r\n    m3u8Attributes.CODECS = attributes.codecs;\r\n  }\r\n\r\n  return {\r\n    attributes: m3u8Attributes,\r\n    uri: '',\r\n    endList: (attributes.type || 'static') === 'static',\r\n    timeline: attributes.periodIndex,\r\n    resolvedUri: attributes.baseUrl || '',\r\n    targetDuration: attributes.duration,\r\n    segments: segments,\r\n    mediaSequence: segments.length ? segments[0].number : 1\r\n  };\r\n};\r\nvar organizeAudioPlaylists = function organizeAudioPlaylists(playlists, sidxMapping) {\r\n  if (sidxMapping === void 0) {\r\n    sidxMapping = {};\r\n  }\r\n\r\n  var mainPlaylist;\r\n  var formattedPlaylists = playlists.reduce(function (a, playlist) {\r\n    var role = playlist.attributes.role && playlist.attributes.role.value || '';\r\n    var language = playlist.attributes.lang || '';\r\n    var label = 'main';\r\n\r\n    if (language) {\r\n      var roleLabel = role ? \" (\" + role + \")\" : '';\r\n      label = \"\" + playlist.attributes.lang + roleLabel;\r\n    } // skip if we already have the highest quality audio for a language\r\n\r\n\r\n    if (a[label] && a[label].playlists[0].attributes.BANDWIDTH > playlist.attributes.bandwidth) {\r\n      return a;\r\n    }\r\n\r\n    a[label] = {\r\n      language: language,\r\n      autoselect: true,\r\n      default: role === 'main',\r\n      playlists: addSegmentInfoFromSidx([formatAudioPlaylist(playlist)], sidxMapping),\r\n      uri: ''\r\n    };\r\n\r\n    if (typeof mainPlaylist === 'undefined' && role === 'main') {\r\n      mainPlaylist = playlist;\r\n      mainPlaylist.default = true;\r\n    }\r\n\r\n    return a;\r\n  }, {}); // if no playlists have role \"main\", mark the first as main\r\n\r\n  if (!mainPlaylist) {\r\n    var firstLabel = Object.keys(formattedPlaylists)[0];\r\n    formattedPlaylists[firstLabel].default = true;\r\n  }\r\n\r\n  return formattedPlaylists;\r\n};\r\nvar organizeVttPlaylists = function organizeVttPlaylists(playlists, sidxMapping) {\r\n  if (sidxMapping === void 0) {\r\n    sidxMapping = {};\r\n  }\r\n\r\n  return playlists.reduce(function (a, playlist) {\r\n    var label = playlist.attributes.lang || 'text'; // skip if we already have subtitles\r\n\r\n    if (a[label]) {\r\n      return a;\r\n    }\r\n\r\n    a[label] = {\r\n      language: label,\r\n      default: false,\r\n      autoselect: false,\r\n      playlists: addSegmentInfoFromSidx([formatVttPlaylist(playlist)], sidxMapping),\r\n      uri: ''\r\n    };\r\n    return a;\r\n  }, {});\r\n};\r\nvar formatVideoPlaylist = function formatVideoPlaylist(_ref3) {\r\n  var _attributes2;\r\n\r\n  var attributes = _ref3.attributes,\r\n      segments = _ref3.segments,\r\n      sidx = _ref3.sidx;\r\n  var playlist = {\r\n    attributes: (_attributes2 = {\r\n      NAME: attributes.id,\r\n      AUDIO: 'audio',\r\n      SUBTITLES: 'subs',\r\n      RESOLUTION: {\r\n        width: attributes.width,\r\n        height: attributes.height\r\n      },\r\n      CODECS: attributes.codecs,\r\n      BANDWIDTH: attributes.bandwidth\r\n    }, _attributes2['PROGRAM-ID'] = 1, _attributes2),\r\n    uri: '',\r\n    endList: (attributes.type || 'static') === 'static',\r\n    timeline: attributes.periodIndex,\r\n    resolvedUri: '',\r\n    targetDuration: attributes.duration,\r\n    segments: segments,\r\n    mediaSequence: segments.length ? segments[0].number : 1\r\n  };\r\n\r\n  if (attributes.contentProtection) {\r\n    playlist.contentProtection = attributes.contentProtection;\r\n  }\r\n\r\n  if (sidx) {\r\n    playlist.sidx = sidx;\r\n  }\r\n\r\n  return playlist;\r\n};\r\nvar toM3u8 = function toM3u8(dashPlaylists, locations, sidxMapping) {\r\n  var _mediaGroups;\r\n\r\n  if (sidxMapping === void 0) {\r\n    sidxMapping = {};\r\n  }\r\n\r\n  if (!dashPlaylists.length) {\r\n    return {};\r\n  } // grab all master attributes\r\n\r\n\r\n  var _dashPlaylists$0$attr = dashPlaylists[0].attributes,\r\n      duration = _dashPlaylists$0$attr.sourceDuration,\r\n      _dashPlaylists$0$attr2 = _dashPlaylists$0$attr.type,\r\n      type = _dashPlaylists$0$attr2 === void 0 ? 'static' : _dashPlaylists$0$attr2,\r\n      suggestedPresentationDelay = _dashPlaylists$0$attr.suggestedPresentationDelay,\r\n      minimumUpdatePeriod = _dashPlaylists$0$attr.minimumUpdatePeriod;\r\n\r\n  var videoOnly = function videoOnly(_ref4) {\r\n    var attributes = _ref4.attributes;\r\n    return attributes.mimeType === 'video/mp4' || attributes.contentType === 'video';\r\n  };\r\n\r\n  var audioOnly = function audioOnly(_ref5) {\r\n    var attributes = _ref5.attributes;\r\n    return attributes.mimeType === 'audio/mp4' || attributes.contentType === 'audio';\r\n  };\r\n\r\n  var vttOnly = function vttOnly(_ref6) {\r\n    var attributes = _ref6.attributes;\r\n    return attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\r\n  };\r\n\r\n  var videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);\r\n  var audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));\r\n  var vttPlaylists = dashPlaylists.filter(vttOnly);\r\n  var master = {\r\n    allowCache: true,\r\n    discontinuityStarts: [],\r\n    segments: [],\r\n    endList: true,\r\n    mediaGroups: (_mediaGroups = {\r\n      AUDIO: {},\r\n      VIDEO: {}\r\n    }, _mediaGroups['CLOSED-CAPTIONS'] = {}, _mediaGroups.SUBTITLES = {}, _mediaGroups),\r\n    uri: '',\r\n    duration: duration,\r\n    playlists: addSegmentInfoFromSidx(videoPlaylists, sidxMapping)\r\n  };\r\n\r\n  if (minimumUpdatePeriod >= 0) {\r\n    master.minimumUpdatePeriod = minimumUpdatePeriod * 1000;\r\n  }\r\n\r\n  if (locations) {\r\n    master.locations = locations;\r\n  }\r\n\r\n  if (type === 'dynamic') {\r\n    master.suggestedPresentationDelay = suggestedPresentationDelay;\r\n  }\r\n\r\n  if (audioPlaylists.length) {\r\n    master.mediaGroups.AUDIO.audio = organizeAudioPlaylists(audioPlaylists, sidxMapping);\r\n  }\r\n\r\n  if (vttPlaylists.length) {\r\n    master.mediaGroups.SUBTITLES.subs = organizeVttPlaylists(vttPlaylists, sidxMapping);\r\n  }\r\n\r\n  return master;\r\n};\r\n\r\n/**\r\n * Calculates the R (repetition) value for a live stream (for the final segment\r\n * in a manifest where the r value is negative 1)\r\n *\r\n * @param {Object} attributes\r\n *        Object containing all inherited attributes from parent elements with attribute\r\n *        names as keys\r\n * @param {number} time\r\n *        current time (typically the total time up until the final segment)\r\n * @param {number} duration\r\n *        duration property for the given <S />\r\n *\r\n * @return {number}\r\n *        R value to reach the end of the given period\r\n */\r\nvar getLiveRValue = function getLiveRValue(attributes, time, duration) {\r\n  var NOW = attributes.NOW,\r\n      clientOffset = attributes.clientOffset,\r\n      availabilityStartTime = attributes.availabilityStartTime,\r\n      _attributes$timescale = attributes.timescale,\r\n      timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\r\n      _attributes$start = attributes.start,\r\n      start = _attributes$start === void 0 ? 0 : _attributes$start,\r\n      _attributes$minimumUp = attributes.minimumUpdatePeriod,\r\n      minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp;\r\n  var now = (NOW + clientOffset) / 1000;\r\n  var periodStartWC = availabilityStartTime + start;\r\n  var periodEndWC = now + minimumUpdatePeriod;\r\n  var periodDuration = periodEndWC - periodStartWC;\r\n  return Math.ceil((periodDuration * timescale - time) / duration);\r\n};\r\n/**\r\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\r\n * timing and duration\r\n *\r\n * @param {Object} attributes\r\n *        Object containing all inherited attributes from parent elements with attribute\r\n *        names as keys\r\n * @param {Object[]} segmentTimeline\r\n *        List of objects representing the attributes of each S element contained within\r\n *\r\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\r\n *         List of Objects with segment timing and duration info\r\n */\r\n\r\n\r\nvar parseByTimeline = function parseByTimeline(attributes, segmentTimeline) {\r\n  var _attributes$type = attributes.type,\r\n      type = _attributes$type === void 0 ? 'static' : _attributes$type,\r\n      _attributes$minimumUp2 = attributes.minimumUpdatePeriod,\r\n      minimumUpdatePeriod = _attributes$minimumUp2 === void 0 ? 0 : _attributes$minimumUp2,\r\n      _attributes$media = attributes.media,\r\n      media = _attributes$media === void 0 ? '' : _attributes$media,\r\n      sourceDuration = attributes.sourceDuration,\r\n      _attributes$timescale2 = attributes.timescale,\r\n      timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\r\n      _attributes$startNumb = attributes.startNumber,\r\n      startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb,\r\n      timeline = attributes.periodIndex;\r\n  var segments = [];\r\n  var time = -1;\r\n\r\n  for (var sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\r\n    var S = segmentTimeline[sIndex];\r\n    var duration = S.d;\r\n    var repeat = S.r || 0;\r\n    var segmentTime = S.t || 0;\r\n\r\n    if (time < 0) {\r\n      // first segment\r\n      time = segmentTime;\r\n    }\r\n\r\n    if (segmentTime && segmentTime > time) {\r\n      // discontinuity\r\n      // TODO: How to handle this type of discontinuity\r\n      // timeline++ here would treat it like HLS discontuity and content would\r\n      // get appended without gap\r\n      // E.G.\r\n      //  <S t=\"0\" d=\"1\" />\r\n      //  <S d=\"1\" />\r\n      //  <S d=\"1\" />\r\n      //  <S t=\"5\" d=\"1\" />\r\n      // would have $Time$ values of [0, 1, 2, 5]\r\n      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\r\n      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\r\n      // does the value of sourceDuration consider this when calculating arbitrary\r\n      // negative @r repeat value?\r\n      // E.G. Same elements as above with this added at the end\r\n      //  <S d=\"1\" r=\"-1\" />\r\n      //  with a sourceDuration of 10\r\n      // Would the 2 gaps be included in the time duration calculations resulting in\r\n      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\r\n      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\r\n      time = segmentTime;\r\n    }\r\n\r\n    var count = void 0;\r\n\r\n    if (repeat < 0) {\r\n      var nextS = sIndex + 1;\r\n\r\n      if (nextS === segmentTimeline.length) {\r\n        // last segment\r\n        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\r\n          count = getLiveRValue(attributes, time, duration);\r\n        } else {\r\n          // TODO: This may be incorrect depending on conclusion of TODO above\r\n          count = (sourceDuration * timescale - time) / duration;\r\n        }\r\n      } else {\r\n        count = (segmentTimeline[nextS].t - time) / duration;\r\n      }\r\n    } else {\r\n      count = repeat + 1;\r\n    }\r\n\r\n    var end = startNumber + segments.length + count;\r\n    var number = startNumber + segments.length;\r\n\r\n    while (number < end) {\r\n      segments.push({\r\n        number: number,\r\n        duration: duration / timescale,\r\n        time: time,\r\n        timeline: timeline\r\n      });\r\n      time += duration;\r\n      number++;\r\n    }\r\n  }\r\n\r\n  return segments;\r\n};\r\n\r\nvar identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\r\n/**\r\n * Replaces template identifiers with corresponding values. To be used as the callback\r\n * for String.prototype.replace\r\n *\r\n * @name replaceCallback\r\n * @function\r\n * @param {string} match\r\n *        Entire match of identifier\r\n * @param {string} identifier\r\n *        Name of matched identifier\r\n * @param {string} format\r\n *        Format tag string. Its presence indicates that padding is expected\r\n * @param {string} width\r\n *        Desired length of the replaced value. Values less than this width shall be left\r\n *        zero padded\r\n * @return {string}\r\n *         Replacement for the matched identifier\r\n */\r\n\r\n/**\r\n * Returns a function to be used as a callback for String.prototype.replace to replace\r\n * template identifiers\r\n *\r\n * @param {Obect} values\r\n *        Object containing values that shall be used to replace known identifiers\r\n * @param {number} values.RepresentationID\r\n *        Value of the Representation@id attribute\r\n * @param {number} values.Number\r\n *        Number of the corresponding segment\r\n * @param {number} values.Bandwidth\r\n *        Value of the Representation@bandwidth attribute.\r\n * @param {number} values.Time\r\n *        Timestamp value of the corresponding segment\r\n * @return {replaceCallback}\r\n *         Callback to be used with String.prototype.replace to replace identifiers\r\n */\r\n\r\nvar identifierReplacement = function identifierReplacement(values) {\r\n  return function (match, identifier, format, width) {\r\n    if (match === '$$') {\r\n      // escape sequence\r\n      return '$';\r\n    }\r\n\r\n    if (typeof values[identifier] === 'undefined') {\r\n      return match;\r\n    }\r\n\r\n    var value = '' + values[identifier];\r\n\r\n    if (identifier === 'RepresentationID') {\r\n      // Format tag shall not be present with RepresentationID\r\n      return value;\r\n    }\r\n\r\n    if (!format) {\r\n      width = 1;\r\n    } else {\r\n      width = parseInt(width, 10);\r\n    }\r\n\r\n    if (value.length >= width) {\r\n      return value;\r\n    }\r\n\r\n    return \"\" + new Array(width - value.length + 1).join('0') + value;\r\n  };\r\n};\r\n/**\r\n * Constructs a segment url from a template string\r\n *\r\n * @param {string} url\r\n *        Template string to construct url from\r\n * @param {Obect} values\r\n *        Object containing values that shall be used to replace known identifiers\r\n * @param {number} values.RepresentationID\r\n *        Value of the Representation@id attribute\r\n * @param {number} values.Number\r\n *        Number of the corresponding segment\r\n * @param {number} values.Bandwidth\r\n *        Value of the Representation@bandwidth attribute.\r\n * @param {number} values.Time\r\n *        Timestamp value of the corresponding segment\r\n * @return {string}\r\n *         Segment url with identifiers replaced\r\n */\r\n\r\nvar constructTemplateUrl = function constructTemplateUrl(url, values) {\r\n  return url.replace(identifierPattern, identifierReplacement(values));\r\n};\r\n/**\r\n * Generates a list of objects containing timing and duration information about each\r\n * segment needed to generate segment uris and the complete segment object\r\n *\r\n * @param {Object} attributes\r\n *        Object containing all inherited attributes from parent elements with attribute\r\n *        names as keys\r\n * @param {Object[]|undefined} segmentTimeline\r\n *        List of objects representing the attributes of each S element contained within\r\n *        the SegmentTimeline element\r\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\r\n *         List of Objects with segment timing and duration info\r\n */\r\n\r\nvar parseTemplateInfo = function parseTemplateInfo(attributes, segmentTimeline) {\r\n  if (!attributes.duration && !segmentTimeline) {\r\n    // if neither @duration or SegmentTimeline are present, then there shall be exactly\r\n    // one media segment\r\n    return [{\r\n      number: attributes.startNumber || 1,\r\n      duration: attributes.sourceDuration,\r\n      time: 0,\r\n      timeline: attributes.periodIndex\r\n    }];\r\n  }\r\n\r\n  if (attributes.duration) {\r\n    return parseByDuration(attributes);\r\n  }\r\n\r\n  return parseByTimeline(attributes, segmentTimeline);\r\n};\r\n/**\r\n * Generates a list of segments using information provided by the SegmentTemplate element\r\n *\r\n * @param {Object} attributes\r\n *        Object containing all inherited attributes from parent elements with attribute\r\n *        names as keys\r\n * @param {Object[]|undefined} segmentTimeline\r\n *        List of objects representing the attributes of each S element contained within\r\n *        the SegmentTimeline element\r\n * @return {Object[]}\r\n *         List of segment objects\r\n */\r\n\r\nvar segmentsFromTemplate = function segmentsFromTemplate(attributes, segmentTimeline) {\r\n  var templateValues = {\r\n    RepresentationID: attributes.id,\r\n    Bandwidth: attributes.bandwidth || 0\r\n  };\r\n  var _attributes$initializ = attributes.initialization,\r\n      initialization = _attributes$initializ === void 0 ? {\r\n    sourceURL: '',\r\n    range: ''\r\n  } : _attributes$initializ;\r\n  var mapSegment = urlTypeToSegment({\r\n    baseUrl: attributes.baseUrl,\r\n    source: constructTemplateUrl(initialization.sourceURL, templateValues),\r\n    range: initialization.range\r\n  });\r\n  var segments = parseTemplateInfo(attributes, segmentTimeline);\r\n  return segments.map(function (segment) {\r\n    templateValues.Number = segment.number;\r\n    templateValues.Time = segment.time;\r\n    var uri = constructTemplateUrl(attributes.media || '', templateValues);\r\n    return {\r\n      uri: uri,\r\n      timeline: segment.timeline,\r\n      duration: segment.duration,\r\n      resolvedUri: resolveUrl(attributes.baseUrl || '', uri),\r\n      map: mapSegment,\r\n      number: segment.number\r\n    };\r\n  });\r\n};\r\n\r\n/**\r\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\r\n * to an object that matches the output of a segment in videojs/mpd-parser\r\n *\r\n * @param {Object} attributes\r\n *   Object containing all inherited attributes from parent elements with attribute\r\n *   names as keys\r\n * @param {Object} segmentUrl\r\n *   <SegmentURL> node to translate into a segment object\r\n * @return {Object} translated segment object\r\n */\r\n\r\nvar SegmentURLToSegmentObject = function SegmentURLToSegmentObject(attributes, segmentUrl) {\r\n  var baseUrl = attributes.baseUrl,\r\n      _attributes$initializ = attributes.initialization,\r\n      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ;\r\n  var initSegment = urlTypeToSegment({\r\n    baseUrl: baseUrl,\r\n    source: initialization.sourceURL,\r\n    range: initialization.range\r\n  });\r\n  var segment = urlTypeToSegment({\r\n    baseUrl: baseUrl,\r\n    source: segmentUrl.media,\r\n    range: segmentUrl.mediaRange\r\n  });\r\n  segment.map = initSegment;\r\n  return segment;\r\n};\r\n/**\r\n * Generates a list of segments using information provided by the SegmentList element\r\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\r\n * node should be translated into segment.\r\n *\r\n * @param {Object} attributes\r\n *   Object containing all inherited attributes from parent elements with attribute\r\n *   names as keys\r\n * @param {Object[]|undefined} segmentTimeline\r\n *        List of objects representing the attributes of each S element contained within\r\n *        the SegmentTimeline element\r\n * @return {Object.<Array>} list of segments\r\n */\r\n\r\n\r\nvar segmentsFromList = function segmentsFromList(attributes, segmentTimeline) {\r\n  var duration = attributes.duration,\r\n      _attributes$segmentUr = attributes.segmentUrls,\r\n      segmentUrls = _attributes$segmentUr === void 0 ? [] : _attributes$segmentUr; // Per spec (5.3.9.2.1) no way to determine segment duration OR\r\n  // if both SegmentTimeline and @duration are defined, it is outside of spec.\r\n\r\n  if (!duration && !segmentTimeline || duration && segmentTimeline) {\r\n    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\r\n  }\r\n\r\n  var segmentUrlMap = segmentUrls.map(function (segmentUrlObject) {\r\n    return SegmentURLToSegmentObject(attributes, segmentUrlObject);\r\n  });\r\n  var segmentTimeInfo;\r\n\r\n  if (duration) {\r\n    segmentTimeInfo = parseByDuration(attributes);\r\n  }\r\n\r\n  if (segmentTimeline) {\r\n    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\r\n  }\r\n\r\n  var segments = segmentTimeInfo.map(function (segmentTime, index) {\r\n    if (segmentUrlMap[index]) {\r\n      var segment = segmentUrlMap[index];\r\n      segment.timeline = segmentTime.timeline;\r\n      segment.duration = segmentTime.duration;\r\n      segment.number = segmentTime.number;\r\n      return segment;\r\n    } // Since we're mapping we should get rid of any blank segments (in case\r\n    // the given SegmentTimeline is handling for more elements than we have\r\n    // SegmentURLs for).\r\n\r\n  }).filter(function (segment) {\r\n    return segment;\r\n  });\r\n  return segments;\r\n};\r\n\r\nvar generateSegments = function generateSegments(_ref) {\r\n  var attributes = _ref.attributes,\r\n      segmentInfo = _ref.segmentInfo;\r\n  var segmentAttributes;\r\n  var segmentsFn;\r\n\r\n  if (segmentInfo.template) {\r\n    segmentsFn = segmentsFromTemplate;\r\n    segmentAttributes = merge(attributes, segmentInfo.template);\r\n  } else if (segmentInfo.base) {\r\n    segmentsFn = segmentsFromBase;\r\n    segmentAttributes = merge(attributes, segmentInfo.base);\r\n  } else if (segmentInfo.list) {\r\n    segmentsFn = segmentsFromList;\r\n    segmentAttributes = merge(attributes, segmentInfo.list);\r\n  }\r\n\r\n  var segmentsInfo = {\r\n    attributes: attributes\r\n  };\r\n\r\n  if (!segmentsFn) {\r\n    return segmentsInfo;\r\n  }\r\n\r\n  var segments = segmentsFn(segmentAttributes, segmentInfo.timeline); // The @duration attribute will be used to determin the playlist's targetDuration which\r\n  // must be in seconds. Since we've generated the segment list, we no longer need\r\n  // @duration to be in @timescale units, so we can convert it here.\r\n\r\n  if (segmentAttributes.duration) {\r\n    var _segmentAttributes = segmentAttributes,\r\n        duration = _segmentAttributes.duration,\r\n        _segmentAttributes$ti = _segmentAttributes.timescale,\r\n        timescale = _segmentAttributes$ti === void 0 ? 1 : _segmentAttributes$ti;\r\n    segmentAttributes.duration = duration / timescale;\r\n  } else if (segments.length) {\r\n    // if there is no @duration attribute, use the largest segment duration as\r\n    // as target duration\r\n    segmentAttributes.duration = segments.reduce(function (max, segment) {\r\n      return Math.max(max, Math.ceil(segment.duration));\r\n    }, 0);\r\n  } else {\r\n    segmentAttributes.duration = 0;\r\n  }\r\n\r\n  segmentsInfo.attributes = segmentAttributes;\r\n  segmentsInfo.segments = segments; // This is a sidx box without actual segment information\r\n\r\n  if (segmentInfo.base && segmentAttributes.indexRange) {\r\n    segmentsInfo.sidx = segments[0];\r\n    segmentsInfo.segments = [];\r\n  }\r\n\r\n  return segmentsInfo;\r\n};\r\nvar toPlaylists = function toPlaylists(representations) {\r\n  return representations.map(generateSegments);\r\n};\r\n\r\nvar findChildren = function findChildren(element, name) {\r\n  return from(element.childNodes).filter(function (_ref) {\r\n    var tagName = _ref.tagName;\r\n    return tagName === name;\r\n  });\r\n};\r\nvar getContent = function getContent(element) {\r\n  return element.textContent.trim();\r\n};\r\n\r\nvar parseDuration = function parseDuration(str) {\r\n  var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\r\n  var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\r\n  var SECONDS_IN_DAY = 24 * 60 * 60;\r\n  var SECONDS_IN_HOUR = 60 * 60;\r\n  var SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S\r\n\r\n  var durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\r\n  var match = durationRegex.exec(str);\r\n\r\n  if (!match) {\r\n    return 0;\r\n  }\r\n\r\n  var _match$slice = match.slice(1),\r\n      year = _match$slice[0],\r\n      month = _match$slice[1],\r\n      day = _match$slice[2],\r\n      hour = _match$slice[3],\r\n      minute = _match$slice[4],\r\n      second = _match$slice[5];\r\n\r\n  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\r\n};\r\nvar parseDate = function parseDate(str) {\r\n  // Date format without timezone according to ISO 8601\r\n  // YYY-MM-DDThh:mm:ss.ssssss\r\n  var dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is\r\n  // expressed by ending with 'Z'\r\n\r\n  if (dateRegex.test(str)) {\r\n    str += 'Z';\r\n  }\r\n\r\n  return Date.parse(str);\r\n};\r\n\r\nvar parsers = {\r\n  /**\r\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\r\n   * as specified in ISO 8601\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The duration in seconds\r\n   */\r\n  mediaPresentationDuration: function mediaPresentationDuration(value) {\r\n    return parseDuration(value);\r\n  },\r\n\r\n  /**\r\n   * Specifies the Segment availability start time for all Segments referred to in this\r\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\r\n   * time. Format is a date string as specified in ISO 8601\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The date as seconds from unix epoch\r\n   */\r\n  availabilityStartTime: function availabilityStartTime(value) {\r\n    return parseDate(value) / 1000;\r\n  },\r\n\r\n  /**\r\n   * Specifies the smallest period between potential changes to the MPD. Format is a\r\n   * duration string as specified in ISO 8601\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The duration in seconds\r\n   */\r\n  minimumUpdatePeriod: function minimumUpdatePeriod(value) {\r\n    return parseDuration(value);\r\n  },\r\n\r\n  /**\r\n   * Specifies the suggested presentation delay. Format is a\r\n   * duration string as specified in ISO 8601\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The duration in seconds\r\n   */\r\n  suggestedPresentationDelay: function suggestedPresentationDelay(value) {\r\n    return parseDuration(value);\r\n  },\r\n\r\n  /**\r\n   * specifices the type of mpd. Can be either \"static\" or \"dynamic\"\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   *\r\n   * @return {string}\r\n   *         The type as a string\r\n   */\r\n  type: function type(value) {\r\n    return value;\r\n  },\r\n\r\n  /**\r\n   * Specifies the duration of the smallest time shifting buffer for any Representation\r\n   * in the MPD. Format is a duration string as specified in ISO 8601\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The duration in seconds\r\n   */\r\n  timeShiftBufferDepth: function timeShiftBufferDepth(value) {\r\n    return parseDuration(value);\r\n  },\r\n\r\n  /**\r\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\r\n   * Format is a duration string as specified in ISO 8601\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The duration in seconds\r\n   */\r\n  start: function start(value) {\r\n    return parseDuration(value);\r\n  },\r\n\r\n  /**\r\n   * Specifies the width of the visual presentation\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The parsed width\r\n   */\r\n  width: function width(value) {\r\n    return parseInt(value, 10);\r\n  },\r\n\r\n  /**\r\n   * Specifies the height of the visual presentation\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The parsed height\r\n   */\r\n  height: function height(value) {\r\n    return parseInt(value, 10);\r\n  },\r\n\r\n  /**\r\n   * Specifies the bitrate of the representation\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The parsed bandwidth\r\n   */\r\n  bandwidth: function bandwidth(value) {\r\n    return parseInt(value, 10);\r\n  },\r\n\r\n  /**\r\n   * Specifies the number of the first Media Segment in this Representation in the Period\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The parsed number\r\n   */\r\n  startNumber: function startNumber(value) {\r\n    return parseInt(value, 10);\r\n  },\r\n\r\n  /**\r\n   * Specifies the timescale in units per seconds\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The aprsed timescale\r\n   */\r\n  timescale: function timescale(value) {\r\n    return parseInt(value, 10);\r\n  },\r\n\r\n  /**\r\n   * Specifies the constant approximate Segment duration\r\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\r\n   *       specifies the duration of the Period. This attribute is currently not\r\n   *       supported by the rest of the parser, however we still check for it to prevent\r\n   *       errors.\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The parsed duration\r\n   */\r\n  duration: function duration(value) {\r\n    var parsedValue = parseInt(value, 10);\r\n\r\n    if (isNaN(parsedValue)) {\r\n      return parseDuration(value);\r\n    }\r\n\r\n    return parsedValue;\r\n  },\r\n\r\n  /**\r\n   * Specifies the Segment duration, in units of the value of the @timescale.\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The parsed duration\r\n   */\r\n  d: function d(value) {\r\n    return parseInt(value, 10);\r\n  },\r\n\r\n  /**\r\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\r\n   * starts relative to the beginning of the Period\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The parsed time\r\n   */\r\n  t: function t(value) {\r\n    return parseInt(value, 10);\r\n  },\r\n\r\n  /**\r\n   * Specifies the repeat count of the number of following contiguous Segments with the\r\n   * same duration expressed by the value of @d\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {number}\r\n   *         The parsed number\r\n   */\r\n  r: function r(value) {\r\n    return parseInt(value, 10);\r\n  },\r\n\r\n  /**\r\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\r\n   * as a string\r\n   *\r\n   * @param {string} value\r\n   *        value of attribute as a string\r\n   * @return {string}\r\n   *         Unparsed value\r\n   */\r\n  DEFAULT: function DEFAULT(value) {\r\n    return value;\r\n  }\r\n};\r\n/**\r\n * Gets all the attributes and values of the provided node, parses attributes with known\r\n * types, and returns an object with attribute names mapped to values.\r\n *\r\n * @param {Node} el\r\n *        The node to parse attributes from\r\n * @return {Object}\r\n *         Object with all attributes of el parsed\r\n */\r\n\r\nvar parseAttributes = function parseAttributes(el) {\r\n  if (!(el && el.attributes)) {\r\n    return {};\r\n  }\r\n\r\n  return from(el.attributes).reduce(function (a, e) {\r\n    var parseFn = parsers[e.name] || parsers.DEFAULT;\r\n    a[e.name] = parseFn(e.value);\r\n    return a;\r\n  }, {});\r\n};\r\n\r\nvar keySystemsMap = {\r\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\r\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\r\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\r\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime'\r\n};\r\n/**\r\n * Builds a list of urls that is the product of the reference urls and BaseURL values\r\n *\r\n * @param {string[]} referenceUrls\r\n *        List of reference urls to resolve to\r\n * @param {Node[]} baseUrlElements\r\n *        List of BaseURL nodes from the mpd\r\n * @return {string[]}\r\n *         List of resolved urls\r\n */\r\n\r\nvar buildBaseUrls = function buildBaseUrls(referenceUrls, baseUrlElements) {\r\n  if (!baseUrlElements.length) {\r\n    return referenceUrls;\r\n  }\r\n\r\n  return flatten(referenceUrls.map(function (reference) {\r\n    return baseUrlElements.map(function (baseUrlElement) {\r\n      return resolveUrl(reference, getContent(baseUrlElement));\r\n    });\r\n  }));\r\n};\r\n/**\r\n * Contains all Segment information for its containing AdaptationSet\r\n *\r\n * @typedef {Object} SegmentInformation\r\n * @property {Object|undefined} template\r\n *           Contains the attributes for the SegmentTemplate node\r\n * @property {Object[]|undefined} timeline\r\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\r\n * @property {Object|undefined} list\r\n *           Contains the attributes for the SegmentList node\r\n * @property {Object|undefined} base\r\n *           Contains the attributes for the SegmentBase node\r\n */\r\n\r\n/**\r\n * Returns all available Segment information contained within the AdaptationSet node\r\n *\r\n * @param {Node} adaptationSet\r\n *        The AdaptationSet node to get Segment information from\r\n * @return {SegmentInformation}\r\n *         The Segment information contained within the provided AdaptationSet\r\n */\r\n\r\nvar getSegmentInformation = function getSegmentInformation(adaptationSet) {\r\n  var segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\r\n  var segmentList = findChildren(adaptationSet, 'SegmentList')[0];\r\n  var segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(function (s) {\r\n    return merge({\r\n      tag: 'SegmentURL'\r\n    }, parseAttributes(s));\r\n  });\r\n  var segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\r\n  var segmentTimelineParentNode = segmentList || segmentTemplate;\r\n  var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\r\n  var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\r\n  var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0]; // SegmentTemplate is handled slightly differently, since it can have both\r\n  // @initialization and an <Initialization> node.  @initialization can be templated,\r\n  // while the node can have a url and range specified.  If the <SegmentTemplate> has\r\n  // both @initialization and an <Initialization> subelement we opt to override with\r\n  // the node, as this interaction is not defined in the spec.\r\n\r\n  var template = segmentTemplate && parseAttributes(segmentTemplate);\r\n\r\n  if (template && segmentInitialization) {\r\n    template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\r\n  } else if (template && template.initialization) {\r\n    // If it is @initialization we convert it to an object since this is the format that\r\n    // later functions will rely on for the initialization segment.  This is only valid\r\n    // for <SegmentTemplate>\r\n    template.initialization = {\r\n      sourceURL: template.initialization\r\n    };\r\n  }\r\n\r\n  var segmentInfo = {\r\n    template: template,\r\n    timeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(function (s) {\r\n      return parseAttributes(s);\r\n    }),\r\n    list: segmentList && merge(parseAttributes(segmentList), {\r\n      segmentUrls: segmentUrls,\r\n      initialization: parseAttributes(segmentInitialization)\r\n    }),\r\n    base: segmentBase && merge(parseAttributes(segmentBase), {\r\n      initialization: parseAttributes(segmentInitialization)\r\n    })\r\n  };\r\n  Object.keys(segmentInfo).forEach(function (key) {\r\n    if (!segmentInfo[key]) {\r\n      delete segmentInfo[key];\r\n    }\r\n  });\r\n  return segmentInfo;\r\n};\r\n/**\r\n * Contains Segment information and attributes needed to construct a Playlist object\r\n * from a Representation\r\n *\r\n * @typedef {Object} RepresentationInformation\r\n * @property {SegmentInformation} segmentInfo\r\n *           Segment information for this Representation\r\n * @property {Object} attributes\r\n *           Inherited attributes for this Representation\r\n */\r\n\r\n/**\r\n * Maps a Representation node to an object containing Segment information and attributes\r\n *\r\n * @name inheritBaseUrlsCallback\r\n * @function\r\n * @param {Node} representation\r\n *        Representation node from the mpd\r\n * @return {RepresentationInformation}\r\n *         Representation information needed to construct a Playlist object\r\n */\r\n\r\n/**\r\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\r\n * Segment information and attributes using inherited BaseURL nodes.\r\n *\r\n * @param {Object} adaptationSetAttributes\r\n *        Contains attributes inherited by the AdaptationSet\r\n * @param {string[]} adaptationSetBaseUrls\r\n *        Contains list of resolved base urls inherited by the AdaptationSet\r\n * @param {SegmentInformation} adaptationSetSegmentInfo\r\n *        Contains Segment information for the AdaptationSet\r\n * @return {inheritBaseUrlsCallback}\r\n *         Callback map function\r\n */\r\n\r\nvar inheritBaseUrls = function inheritBaseUrls(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {\r\n  return function (representation) {\r\n    var repBaseUrlElements = findChildren(representation, 'BaseURL');\r\n    var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\r\n    var attributes = merge(adaptationSetAttributes, parseAttributes(representation));\r\n    var representationSegmentInfo = getSegmentInformation(representation);\r\n    return repBaseUrls.map(function (baseUrl) {\r\n      return {\r\n        segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\r\n        attributes: merge(attributes, {\r\n          baseUrl: baseUrl\r\n        })\r\n      };\r\n    });\r\n  };\r\n};\r\n/**\r\n * Tranforms a series of content protection nodes to\r\n * an object containing pssh data by key system\r\n *\r\n * @param {Node[]} contentProtectionNodes\r\n *        Content protection nodes\r\n * @return {Object}\r\n *        Object containing pssh data by key system\r\n */\r\n\r\nvar generateKeySystemInformation = function generateKeySystemInformation(contentProtectionNodes) {\r\n  return contentProtectionNodes.reduce(function (acc, node) {\r\n    var attributes = parseAttributes(node);\r\n    var keySystem = keySystemsMap[attributes.schemeIdUri];\r\n\r\n    if (keySystem) {\r\n      acc[keySystem] = {\r\n        attributes: attributes\r\n      };\r\n      var psshNode = findChildren(node, 'cenc:pssh')[0];\r\n\r\n      if (psshNode) {\r\n        var pssh = getContent(psshNode);\r\n        var psshBuffer = pssh && decodeB64ToUint8Array(pssh);\r\n        acc[keySystem].pssh = psshBuffer;\r\n      }\r\n    }\r\n\r\n    return acc;\r\n  }, {});\r\n};\r\n/**\r\n * Maps an AdaptationSet node to a list of Representation information objects\r\n *\r\n * @name toRepresentationsCallback\r\n * @function\r\n * @param {Node} adaptationSet\r\n *        AdaptationSet node from the mpd\r\n * @return {RepresentationInformation[]}\r\n *         List of objects containing Representaion information\r\n */\r\n\r\n/**\r\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\r\n * Representation information objects\r\n *\r\n * @param {Object} periodAttributes\r\n *        Contains attributes inherited by the Period\r\n * @param {string[]} periodBaseUrls\r\n *        Contains list of resolved base urls inherited by the Period\r\n * @param {string[]} periodSegmentInfo\r\n *        Contains Segment Information at the period level\r\n * @return {toRepresentationsCallback}\r\n *         Callback map function\r\n */\r\n\r\n\r\nvar toRepresentations = function toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo) {\r\n  return function (adaptationSet) {\r\n    var adaptationSetAttributes = parseAttributes(adaptationSet);\r\n    var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\r\n    var role = findChildren(adaptationSet, 'Role')[0];\r\n    var roleAttributes = {\r\n      role: parseAttributes(role)\r\n    };\r\n    var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\r\n    var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\r\n\r\n    if (Object.keys(contentProtection).length) {\r\n      attrs = merge(attrs, {\r\n        contentProtection: contentProtection\r\n      });\r\n    }\r\n\r\n    var segmentInfo = getSegmentInformation(adaptationSet);\r\n    var representations = findChildren(adaptationSet, 'Representation');\r\n    var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\r\n    return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\r\n  };\r\n};\r\n/**\r\n * Maps an Period node to a list of Representation inforamtion objects for all\r\n * AdaptationSet nodes contained within the Period\r\n *\r\n * @name toAdaptationSetsCallback\r\n * @function\r\n * @param {Node} period\r\n *        Period node from the mpd\r\n * @param {number} periodIndex\r\n *        Index of the Period within the mpd\r\n * @return {RepresentationInformation[]}\r\n *         List of objects containing Representaion information\r\n */\r\n\r\n/**\r\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\r\n * Representation information objects\r\n *\r\n * @param {Object} mpdAttributes\r\n *        Contains attributes inherited by the mpd\r\n * @param {string[]} mpdBaseUrls\r\n *        Contains list of resolved base urls inherited by the mpd\r\n * @return {toAdaptationSetsCallback}\r\n *         Callback map function\r\n */\r\n\r\nvar toAdaptationSets = function toAdaptationSets(mpdAttributes, mpdBaseUrls) {\r\n  return function (period, index) {\r\n    var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period, 'BaseURL'));\r\n    var periodAtt = parseAttributes(period);\r\n    var parsedPeriodId = parseInt(periodAtt.id, 10); // fallback to mapping index if Period@id is not a number\r\n\r\n    var periodIndex = window.isNaN(parsedPeriodId) ? index : parsedPeriodId;\r\n    var periodAttributes = merge(mpdAttributes, {\r\n      periodIndex: periodIndex\r\n    });\r\n    var adaptationSets = findChildren(period, 'AdaptationSet');\r\n    var periodSegmentInfo = getSegmentInformation(period);\r\n    return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\r\n  };\r\n};\r\n/**\r\n * Traverses the mpd xml tree to generate a list of Representation information objects\r\n * that have inherited attributes from parent nodes\r\n *\r\n * @param {Node} mpd\r\n *        The root node of the mpd\r\n * @param {Object} options\r\n *        Available options for inheritAttributes\r\n * @param {string} options.manifestUri\r\n *        The uri source of the mpd\r\n * @param {number} options.NOW\r\n *        Current time per DASH IOP.  Default is current time in ms since epoch\r\n * @param {number} options.clientOffset\r\n *        Client time difference from NOW (in milliseconds)\r\n * @return {RepresentationInformation[]}\r\n *         List of objects containing Representation information\r\n */\r\n\r\nvar inheritAttributes = function inheritAttributes(mpd, options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n\r\n  var _options = options,\r\n      _options$manifestUri = _options.manifestUri,\r\n      manifestUri = _options$manifestUri === void 0 ? '' : _options$manifestUri,\r\n      _options$NOW = _options.NOW,\r\n      NOW = _options$NOW === void 0 ? Date.now() : _options$NOW,\r\n      _options$clientOffset = _options.clientOffset,\r\n      clientOffset = _options$clientOffset === void 0 ? 0 : _options$clientOffset;\r\n  var periods = findChildren(mpd, 'Period');\r\n\r\n  if (!periods.length) {\r\n    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\r\n  }\r\n\r\n  var locations = findChildren(mpd, 'Location');\r\n  var mpdAttributes = parseAttributes(mpd);\r\n  var mpdBaseUrls = buildBaseUrls([manifestUri], findChildren(mpd, 'BaseURL'));\r\n  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\r\n  mpdAttributes.NOW = NOW;\r\n  mpdAttributes.clientOffset = clientOffset;\r\n\r\n  if (locations.length) {\r\n    mpdAttributes.locations = locations.map(getContent);\r\n  }\r\n\r\n  return {\r\n    locations: mpdAttributes.locations,\r\n    representationInfo: flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls)))\r\n  };\r\n};\r\n\r\nvar stringToMpdXml = function stringToMpdXml(manifestString) {\r\n  if (manifestString === '') {\r\n    throw new Error(errors.DASH_EMPTY_MANIFEST);\r\n  }\r\n\r\n  var parser = new DOMParser();\r\n  var xml = parser.parseFromString(manifestString, 'application/xml');\r\n  var mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\r\n\r\n  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\r\n    throw new Error(errors.DASH_INVALID_XML);\r\n  }\r\n\r\n  return mpd;\r\n};\r\n\r\n/**\r\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\r\n *\r\n * @param {string} mpd\r\n *        XML string of the MPD manifest\r\n * @return {Object|null}\r\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\r\n */\r\n\r\nvar parseUTCTimingScheme = function parseUTCTimingScheme(mpd) {\r\n  var UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\r\n\r\n  if (!UTCTimingNode) {\r\n    return null;\r\n  }\r\n\r\n  var attributes = parseAttributes(UTCTimingNode);\r\n\r\n  switch (attributes.schemeIdUri) {\r\n    case 'urn:mpeg:dash:utc:http-head:2014':\r\n    case 'urn:mpeg:dash:utc:http-head:2012':\r\n      attributes.method = 'HEAD';\r\n      break;\r\n\r\n    case 'urn:mpeg:dash:utc:http-xsdate:2014':\r\n    case 'urn:mpeg:dash:utc:http-iso:2014':\r\n    case 'urn:mpeg:dash:utc:http-xsdate:2012':\r\n    case 'urn:mpeg:dash:utc:http-iso:2012':\r\n      attributes.method = 'GET';\r\n      break;\r\n\r\n    case 'urn:mpeg:dash:utc:direct:2014':\r\n    case 'urn:mpeg:dash:utc:direct:2012':\r\n      attributes.method = 'DIRECT';\r\n      attributes.value = Date.parse(attributes.value);\r\n      break;\r\n\r\n    case 'urn:mpeg:dash:utc:http-ntp:2014':\r\n    case 'urn:mpeg:dash:utc:ntp:2014':\r\n    case 'urn:mpeg:dash:utc:sntp:2014':\r\n    default:\r\n      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\r\n  }\r\n\r\n  return attributes;\r\n};\r\n\r\nvar VERSION = version;\r\n\r\nvar parse = function parse(manifestString, options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n\r\n  var parsedManifestInfo = inheritAttributes(stringToMpdXml(manifestString), options);\r\n  var playlists = toPlaylists(parsedManifestInfo.representationInfo);\r\n  return toM3u8(playlists, parsedManifestInfo.locations, options.sidxMapping);\r\n};\r\n/**\r\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\r\n *\r\n * @param {string} manifestString\r\n *        XML string of the MPD manifest\r\n * @return {Object|null}\r\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\r\n */\r\n\r\n\r\nvar parseUTCTiming = function parseUTCTiming(manifestString) {\r\n  return parseUTCTimingScheme(stringToMpdXml(manifestString));\r\n};\r\n\r\nexport { VERSION, inheritAttributes, parse, parseUTCTiming, stringToMpdXml, toM3u8, toPlaylists };\r\n"]},"metadata":{},"sourceType":"module"}